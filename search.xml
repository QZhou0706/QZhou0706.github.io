<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>计划概览</title>
    <url>/2023-04-24-summary/</url>
    <content><![CDATA[<p>**Preface:**很长时间没有对自己的整体做一个回顾了，前几日把失去的博客重新配好，借此机会赶紧对上个阶段的自己做一个个人总结，并且安排一下随后的计划。</p>
<hr>
<h4 id="概览："><a href="#概览：" class="headerlink" title="概览："></a>概览：</h4><p>防止自己天马星空的头脑让这篇summary变得杂乱无章，就对自己在以下几个方面进行回顾。</p>
<h5 id="生活："><a href="#生活：" class="headerlink" title="生活："></a>生活：</h5><p>自从本学期学校不再受到疫情的干扰，校内外行动自如了许多，加之我是个不爱在空间上克制自己的人，与上学期相比，生活上一个很大的不同就是出校变得频繁。在不断享受校外人文与美食的同时，我的经济也时常告急，我认为我需要更加注意一些，以免在这个物价颇高的城市让自己陷入窘境。</p>
<p><del>（我恋爱了）</del> 青春就应该大胆地去谈论爱情，从去年十一月开始谈恋爱，我对这份爱情甚是认真。在生活中或多或少会出现各种摩擦、纷争，虽然最终都是可以较为合理地被解决，但仍然存在疑点：我在很多方面一直都是早时的模样——我认为正确就一定是正确的。仔细思考，我的个人主义使我的侵略性过强、自我保护意识过重，这是我目前对自己不太满意的地方。前些年我养成这样的特质让我有了不同常人的个性的思维，但是现在它不再能帮助我太多，我需要慢慢放下这种强烈的自我主义，开始多去思考一些事物的其他角度了。</p>
<p>从来到学校开始，我感觉到了妈妈对我的想念，我也经常会挑时间去跟她打打视频和电话，但是我还总是怕她一看到我来找她就是要跟她索取生活费，这种感觉其实不是很好。</p>
<h5 id="学习："><a href="#学习：" class="headerlink" title="学习："></a>学习：</h5><p>学习依旧是当下的主旋律。本学期开始有了一些真正的专业课，Computer Organization, Digital Logic Circuit, Operating System, OOP ，加上我有一些公共基础课和选修课，还有补上的大一的几门课，课内的压力实际上已经很大。但是课上所教授的内容并不能满足我对知识的渴求，这催动我去自学一些更深入、更有吸引力的知识，这让这原本的压力具象化，开始有点压制到我。</p>
<ul>
<li><strong>二月中下旬：</strong>刚开学的时候我还没有其他方面的大方向，有十几天的主要精力都放在了算法上，平均一天中有六七个小时是在补题。后来发现其他更有意思的东西，就转换精力去学它们了（后续会提到）。</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/codeforces.png" alt="Codeforces Training"></p>
<ul>
<li><p><strong>三月初：</strong>我开始自学linux、django框架等backend内容，做了个半成品小游戏。学习linux正好与校内操作系统课接轨，我刚好从这个时候开始捣鼓我的计算机，装ubuntu虚拟机，不满足虚拟机的性能和体验，装ubuntu双系统，一开始胡装了一个ubuntu20.04，各种源、镜像、驱动的知识都不足，导致这个系统根本不好用，徒有其表，一不小心下载什么或者打开什么就会出现各种问题，当时的我也看不懂各种报错是什么意思，各种无脑复制去网上查然后照抄操作，终于在广大网友的帮助下这个系统已经烂到没法用了，也没有办法还原，然后把磁盘清空、重装。在重复了$n$次之后，我感觉自己需要了解这些问题的根源、计算机&#x2F;操作系统maker给出的error info到底是什么意思，以前往往认为这些东西离我太遥远我只要去复制到百度就好。终于在不断努力下我有了可以稳定使用的ubuntu20.04</p>
</li>
<li><p><strong>三月中下旬：</strong>我开始认真对待南大jyy的操作系统，惊叹于一个人能将一个终端用到这种出神入化的程度（还有他的变态手速）。It’s super cool!这时我的最大感想，其次就是他的操作系统（2021）教学有很多对南大前导课程（计算机系统基础）的知识依赖，我一节课有大部分都是听不懂的。在这种情况下我放弃了死磕操作系统，开始去看他的计算机系统基础课，然后了解到了PA。</p>
</li>
<li><p><strong>三月下旬到四月上旬（计算机系统基础和PA）：</strong>我对jyy那种使用计算机的风格的迷恋与我对自己计算机与之的差距的不满，让我日思夜想地去寻找一个问题的答案：How to configure my computer elegantly?依靠自己rubbish-like的搜索能力无果，我尝试去计算机系统基础和PA中寻找答案。它们的确是好东西，只看了前几节我就慢慢把一些内容串联到我操作系统课上完全听不懂的知识上，例如：RTFM、STFW以及RTFSC……耐心地读英文，还有正确的搜索姿势、读很多。回到我想要把自己的电脑配置的符合我的想法这件事情上，我认为我当时的“稳定”的ubuntu20.04感觉总有些重要的东西和jyy的电脑有出入，在PA中说要装一个debian系统，我想要循规蹈矩地照着教程做，我先把原来的ubuntu卸载，然后<del>（电脑就坏了）</del>不会卸载子系统，只在windows把磁盘格式化了，EFI启动项不会删除，导致电脑还是默认ubuntu启动，启动了一个已经被格式化了分区的系统。千方百计进了windows后一顿操作猛如虎，不知道怎么把windows的一个盘符分区格式化了，文件全丢了，更不巧的是我大学的大部分文件全都放在这个分区里😭😭😭包括我上一个博客<a href="https://arickkaa.github.io/">Arickkaa</a>（源代码没有备份，这个操作也导致了这个博客的诞生），只记得那天我工作到凌晨四点。这个操作坚定了我了解计算机内部的决心，我当时心想一定要搞懂这个东西，不然我处处都被牵制（虽然不知道为什么会感觉被牵制，或许是感到无知）。我最终成功搞懂了怎么彻底卸载系统，还有装上了debian11无桌面版，不好使<del>（长得太丑）</del>，卸载了，装上了我现在使用的ubuntu22.04，这个其实也装了$N$次，遇到各种问题，只是现在我已经具备了独立解决问题的能力，基本上都能独自面对然后较好地解决。这段时间还看完了CSAPP的第二章内容，巩固了一些C语言基础，学会了linux中的很多指令、工作技巧、概念原理等。</p>
</li>
<li><p><strong>四月至四月下旬（算法）：</strong>许久没管的算法竞赛还是找上我了，教练要求我每周去实验室待十个小时以上，和队友打打VP，平时CF都去打，我和队友安排在周五下午和晚上连着十个小时。结果第一次去就类的半死，然后那天从下午一亮点到晚上七点半就撑不住了，把剩下的时间安排到周六晚上的CF上。本身这个强度已经算大，但是勉强不算过于劳累，但是教练连着好几周，每周周末组织了一次这个赛季的XCPC邀请赛名额的选拔赛（我严重怀疑就是教练故意骗我们时间），不过我和队友也都去了，不堪重负，我经常半夜很晚才睡然后拖着身体去上第二天早八。疲劳到周末，然后还不能睡懒觉，每个周末着急忙慌地赶到实验室打选拔赛。上上个周末的周六打了蓝桥杯的初赛，当时状态其实挺差，遇到第三题卡住就卡了将近两个小时，前两天出结果只拿到了省二，明年要拿国奖。上个星期打了天体赛，智商也不太在线，打的过程中手机有问题耽误了挺多时间，不过也没有拉低平均，最后在大家的努力下拿到了团体国家二等奖。</p>
</li>
</ul>
<p>​	整体四月份的学习就是这样，困难重重，不过在解决困难的过程中我也学到了很多。</p>
<h5 id="思想："><a href="#思想：" class="headerlink" title="思想："></a>思想：</h5><p>这一部分在我的上一个stage发生了比较曲折的转变，甚至现在都还不是十分清晰，但是写完这篇summary会确定它。</p>
<p>自从高中起，我的心中总有一种声音在告诉我，我要去、需要去做一些探寻真理的事情，在很长的一段时间里，我也把科研当作我的目标。持续到了大一，因为一些巧合或者说是看起来像巧合的必然，我从Automation转到了CS专业。大二上学期，也就是去年下半年到今年年初又因为一些家庭带来的改变开始急剧转换思想，甚至连读研究生都开始产生不小的抗拒，内心一直给自己灌输一些思想：要快速转到钱。我也一直就顺从这个思想，想要赶紧挣脱一些束缚，能够自己掌握自己的命运（在我看来就是独立成家赚钱）。我与我先前那些远大的理想不会允许这种浮躁的状态持续，所以在浮躁了接近大半年后，渴求于知识驱动我静下心来慢慢体会很多细小而精妙的前人的技巧（比如算法、操作系统等）。一静下心来，唤起埋藏内心深处的一个想法：我想要深入钻研这些东西。</p>
<p>终于在前几天，经过了很多次怀疑和思考中，我承认了思想的再一次转变，我还是想要追求纯粹的知识，我确立它，希望这一次可以坚持践行下去。</p>
<hr>
<h4 id="计划："><a href="#计划：" class="headerlink" title="计划："></a>计划：</h4><ul>
<li>与上面概览的顺序不同，最重要的就是思想：坚持下去。</li>
<li>学习与生活一起，我觉得还是要尝试制定一下比较详细的计划，至少需要比原来详细一些，把资源分配的明显一些，无论是时间还是金钱或者是一些其他需要分配的东西。</li>
</ul>
<p>仅此而已</p>
<hr>
]]></content>
      <categories>
        <category>misc</category>
      </categories>
  </entry>
  <entry>
    <title>计算机系统基础2. C语言拾遗(2):编程实践</title>
    <url>/2023-04-25-computer_system2/</url>
    <content><![CDATA[<p><strong>Preface:</strong></p>
<p>假设我们已经熟练使用各种C语言机制，原则上给需求就能搞定任何代码，但是结果并不是。本次课程就是教学怎么写代码才能从一个大型项目里存活下来</p>
<ul>
<li>核心准则：编写可读代码</li>
</ul>
<span id="more"></span>

<h4 id="核心准则：编写可读代码"><a href="#核心准则：编写可读代码" class="headerlink" title="核心准则：编写可读代码"></a>核心准则：编写可读代码</h4><p><a href="https://www.ioccc.org/2011/hou/hou.c">IOCCC’11 best self documenting program</a></p>
<ul>
<li>不可读 &#x3D; 不可维护</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="built_in">puts</span>(usage: calculator <span class="number">11</span>/<span class="number">26</span>+<span class="number">222</span>/<span class="number">31</span></span><br><span class="line">  +~~~~~~~~~~~~~~~~~~~~~~~~calculator-\</span><br><span class="line">  !                          <span class="number">7.584</span>,<span class="number">367</span> )</span><br><span class="line">  +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+</span><br><span class="line">  ! clear ! <span class="number">0</span> ||l   -x  l   <span class="built_in">tan</span>  <span class="title function_">I</span> <span class="params">(/)</span> |</span><br><span class="line">  +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+</span><br><span class="line">  ! 1 | 2 | 3 ||l  1/x  l   <span class="built_in">cos</span>  <span class="title function_">I</span> <span class="params">(*)</span> |</span><br><span class="line">  +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+</span><br><span class="line">  ! 4 | 5 | 6 ||l  <span class="built_in">exp</span>  l  <span class="built_in">sqrt</span>  <span class="title function_">I</span> <span class="params">(+)</span> |</span><br><span class="line">  +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~+</span><br><span class="line">  ! 7 | 8 | 9 ||l  <span class="built_in">sin</span>  l   <span class="built_in">log</span>  <span class="title function_">I</span> <span class="params">(-)</span> |</span><br><span class="line">  +~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~<span class="params">(<span class="number">0</span></span></span><br><span class="line"><span class="params">)</span>;</span><br></pre></td></tr></table></figure>

<p>这是一段完全滥用 C 语言机制的代码，完全不可读。如果完全不可读，如果下次需要增加一个运算符，那么就极难进行维护。</p>
<p>这种代码或许平时不会写，但是一个现实中可能遇到的例子:</p>
<p><strong>人类不可读版 (STFW: clockwise&#x2F;spiral rule)</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> (*signal(<span class="type">int</span> sig, <span class="type">void</span> (*func)(<span class="type">int</span>)))(<span class="type">int</span>);</span><br></pre></td></tr></table></figure>

<p><strong>人类可读版</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="title function_">void</span> <span class="params">(*<span class="type">sighandler_t</span>)</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"><span class="type">sighandler_t</span> <span class="title function_">signal</span><span class="params">(<span class="type">int</span>, <span class="type">sighandler_t</span>)</span>;</span><br></pre></td></tr></table></figure>

<p>上面这个函数实际上就是一个函数指针，返回值为和参数同类型的函数指针，但是可读版和不可读版读起来和改起来难度完全不同，下面的代码对人类更 friendly</p>
<h4 id="编写代码的准则：降低维护成本"><a href="#编写代码的准则：降低维护成本" class="headerlink" title="编写代码的准则：降低维护成本"></a>编写代码的准则：降低维护成本</h4><p>为什么在编写一个比较长的代码的时候维护起来比较困难？长不是主要的问题，只是当代码的 size 增长之后，我们很难在回去看的时候明白每一个代码中的细节</p>
<blockquote>
<p>Programs are meant to be read by humans and only incidentally for computers to execute. — <em>D. E. Knuth</em></p>
<p>(程序首先是拿给人读的，其次才是被机器执行。)</p>
</blockquote>
<h5 id="宏观"><a href="#宏观" class="headerlink" title="宏观"></a>宏观</h5><ul>
<li>做好分解和解耦(现实世界也是这样管理复杂的系统的)<ul>
<li>大学中选课、住宿、食堂……</li>
</ul>
</li>
</ul>
<h5 id="微观"><a href="#微观" class="headerlink" title="微观"></a>微观</h5><ul>
<li>“不言自明”<ul>
<li>通过<strong>阅读代码</strong>(直接阅读代码的文本)能理解一段程序是做什么的(specification)</li>
</ul>
</li>
<li>“不言自证”<ul>
<li>通过<strong>阅读代码</strong>能验证一段程序与 specification 的一致性，我阅读完代码之后，不仅知道代码是做什么的，还了解代码的输入输出是如何规范等等</li>
</ul>
</li>
</ul>
<h5 id="例子：实现数字逻辑电路"><a href="#例子：实现数字逻辑电路" class="headerlink" title="例子：实现数字逻辑电路"></a>例子：实现数字逻辑电路</h5><p>假想的数字逻辑电路</p>
<ul>
<li>若干个 1-bit 边沿触发寄存器(X, Y, …)</li>
<li>若干个逻辑门</li>
</ul>
<p>我们怎么设计？</p>
<ul>
<li>基本思路：状态（存储）模拟 + 计算模拟<ul>
<li>状态 &#x3D; 变量<ul>
<li>int X &#x3D; 0, Y &#x3D; 0;</li>
</ul>
</li>
<li>计算(while 循环)<ul>
<li>X1 &#x3D; !X &amp;&amp; Y;</li>
<li>Y1 &#x3D; !X &amp;&amp; !Y;</li>
<li>X &#x3D; X1; Y &#x3D; Y1;</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>如果要增加一个触发器 Z ，我们就需要对代码作出一些改动</p>
<ul>
<li><p>定义变量 Z, Z1</p>
</li>
<li><p>对 while 循环内的逻辑增加几行</p>
</li>
</ul>
<p>如果项目不是这么简单，是一个很大的项目，以下的各种逻辑都用在各种文件中，我们要修改 such as 8 处，或许很容易出现各种编译会报错或者不报错(更可怕)的错误</p>
<p><strong>通用数字逻辑电路模拟器(cant’d)</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> FORALL_REGS(_)  _(X) _(Y)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> LOGIC           X1 = !X &amp;&amp; Y; \</span></span><br><span class="line"><span class="meta">                        Y1 = !X &amp;&amp; !Y;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> DEFINE(X)       static int X, X##1;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> UPDATE(X)       X = X##1;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> PRINT(X)        printf(#X <span class="string">&quot; = %d; &quot;</span>, X);</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  FORALL_REGS(DEFINE);</span><br><span class="line">  <span class="keyword">while</span> (<span class="number">1</span>) &#123; <span class="comment">// clock</span></span><br><span class="line">    FORALL_REGS(PRINT); <span class="built_in">putchar</span>(<span class="string">&#x27;\n&#x27;</span>); sleep(<span class="number">1</span>);</span><br><span class="line">    LOGIC;</span><br><span class="line">    FORALL_REGS(UPDATE);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="使用预编译：Good-and-Bad"><a href="#使用预编译：Good-and-Bad" class="headerlink" title="使用预编译：Good and Bad"></a>使用预编译：Good and Bad</h5><p>Good</p>
<ul>
<li>增加&#x2F;删除寄存器只要修改一个地方</li>
<li>阻止一些编译错误<ul>
<li>忘记更新寄存器</li>
<li>忘记打印寄存器</li>
</ul>
</li>
<li>“不言自明”还算不错</li>
</ul>
<p>Bad</p>
<ul>
<li>可读性变差(更不像 C 代码了)<ul>
<li>“不言自证“还缺一些</li>
</ul>
</li>
<li>给 IDE 解析带来一些困难</li>
</ul>
<p><strong>更完整的实现：数码管显示</strong></p>
<p><a href="https://jyywiki.cn/pages/ICS/2020/demos/logisim.c">logisim.c</a> 和 <a href="https://jyywiki.cn/pages/ICS/2020/demos/display.py">display.py</a></p>
<ul>
<li>也可以考虑增加诸如开关、UART等外设</li>
<li>原理无限接近数字电路课玩的 FPGA</li>
</ul>
<p>FPGA？它不是万能的吗？？</p>
<ul>
<li>我们能模拟它，是不是就能模拟计算机系统？</li>
</ul>
<hr>
<h4 id="例子：实现-YEMU-全系统模拟器"><a href="#例子：实现-YEMU-全系统模拟器" class="headerlink" title="例子：实现 YEMU 全系统模拟器"></a>例子：实现 YEMU 全系统模拟器</h4><h5 id="最简单的计算机"><a href="#最简单的计算机" class="headerlink" title="最简单的计算机"></a>最简单的计算机</h5><p><strong>存储系统</strong></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">寄存器: PC, R0 (RA), R1, R2, R3 (8-bit)</span><br><span class="line">内存：  16字节 (按字节访问)</span><br></pre></td></tr></table></figure>

<p>指令集</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">       7 6 5 4   3 2   1 0</span><br><span class="line">mov   [0 0 0 0] [ rt] [ rs]</span><br><span class="line">add   [0 0 0 1] [ rt] [ rs]</span><br><span class="line">load  [1 1 1 0] [   addr  ]</span><br><span class="line">store [1 1 1 1] [   addr  ]</span><br></pre></td></tr></table></figure>

<p>这就是一个 ISA ，前几位是一段二进制代码， CPU 接收到一段机器码，根据这段手册去匹配一些指令 mov, add, load, sotre……有“计算机系统“的感觉了？</p>
<ul>
<li>它显然可以用数字逻辑电路实现(这个实现实际上和012是一样的)</li>
<li>不过我们<strong>不需要在门层面实现它</strong><ul>
<li>接下来实现一个超级低配版 NEMU……</li>
</ul>
</li>
</ul>
<h5 id="Y-Emulator-YEMU-设计与实现"><a href="#Y-Emulator-YEMU-设计与实现" class="headerlink" title="Y-Emulator (YEMU) 设计与实现"></a>Y-Emulator (YEMU) 设计与实现</h5><p><strong>存储模型：内存 + 寄存器(包含 PC)</strong></p>
<ul>
<li>16 + 5 &#x3D; 21 bytes &#x3D; 168 bits</li>
<li>总共有 $2^{168}$种不同的取值<ul>
<li>任给一个状态，我们都能计算出 PC 处的命令，从而计算出下一个状态</li>
</ul>
</li>
</ul>
<p>理论上，任何计算机系统都是这样的<strong>状态机</strong></p>
<ul>
<li>$(M,R)$构成了计算机系统的状态</li>
<li>32 GiB 内存有 $2^{274877906944}$种不同的状态</li>
<li>每个时钟周期，取出 $M[R[PC]]$ 的指令；执行；写回<ul>
<li>受制于物理实现(和功耗)的限制，通常每个始终周期只能改变少量的寄存器和内存的状态</li>
<li>(量子计算机颠覆了这个模型：同一时刻可以处于多个状态)</li>
</ul>
</li>
</ul>
<p><strong>存储</strong>是计算机能实现“计算”的重要基础</p>
<ul>
<li>寄存器(PC)、内存</li>
<li>这简单，用全局变量就好了！</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdint.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NREG 4</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NMEM 16</span></span><br><span class="line"><span class="keyword">typedef</span> <span class="type">uint8_t</span> u8; <span class="comment">// 没用过 uint8_t？</span></span><br><span class="line">u8 pc = <span class="number">0</span>, R[NREG], M[NMEM] = &#123; ... &#125;;</span><br></pre></td></tr></table></figure>

<ul>
<li>建议 STFW(C 标准库) → bool 有没有？(Answer is “NO”)</li>
<li>现代计算机系统：uint8_t &#x3D;&#x3D; unsigned char<ul>
<li>C Tips: 使用 unsigned int 避免潜在的 UB<ul>
<li>-fwrapv 可以强制有符号整数溢出为 wraparound</li>
</ul>
</li>
<li>C Quiz: 把指针转换成整数，应该用什么类型？(Answer is intptr_t in &lt;stdint.h&gt;)</li>
</ul>
</li>
</ul>
<p><strong>提升代码质量</strong></p>
<p>给寄存器名字？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NREG 4</span></span><br><span class="line">u8 R[NREG], pc; <span class="comment">// 有些指令是用寄存器名描述的</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RA 1    <span class="comment">// <span class="doctag">BUG:</span> 数组下标从0开始</span></span></span><br><span class="line">... </span><br></pre></td></tr></table></figure>

<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span> RA, R1, ..., PC &#125;;</span><br><span class="line">u8 R[] = &#123;</span><br><span class="line">  [RA] = <span class="number">0</span>,  <span class="comment">// 这是什么语法？？</span></span><br><span class="line">  [R1] = <span class="number">0</span>,</span><br><span class="line">  ...</span><br><span class="line">  [PC]  = init_pc,</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> pc (R[PC]) <span class="comment">// 把 PC 也作为寄存器的一部分</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NREG (sizeof(R) / sizeof(u8))</span></span><br></pre></td></tr></table></figure>

<p>使用 C 语言中的特性</p>
<ul>
<li>enum 添加寄存器</li>
<li>可以在数组中用 such as [RA] &#x3D; 0 语法，避免在定义数组时多一个或者少一个 0 (人类难以避免犯这种错误)<ul>
<li>我们如何证明自己是正确的呢？<ul>
<li>对着第一行的 enum 中内容在下面 R[] 中逐个定义</li>
</ul>
</li>
</ul>
</li>
<li>用 sizeof(R) &#x2F; sizeof(u8) 计算寄存器的大小，防止漏掉一些细节比如数组从 0 开始或者是新添加一个寄存器</li>
</ul>
<p><strong>从一小带代码看软件设计</strong></p>
<p>软件里有很多隐藏的 dependencies (一些额外的、代码中没有体现和约束的“规则”)</p>
<ul>
<li>一处改了，另一处忘了(例如加了一个寄存器但是忘记更新 NREG)</li>
<li>减少 dependencies → 降低代码耦合程度</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">// breaks when adding a register</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NREG 5 <span class="comment">// 隐藏假设max&#123;RA, RB, ... PC&#125; == (NREG - 1)</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// breaks when changing register size</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NREG (sizeof(R) / sizeof(u8)) <span class="comment">// 隐藏假设寄存器是8-bit</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// never breaks</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NREG (sizeof(R) / sizeof(R[0])) <span class="comment">// 但需要R的定义</span></span></span><br><span class="line"></span><br><span class="line"><span class="comment">// even better (why?)</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span> RA, ... , PC, NREG &#125;</span><br></pre></td></tr></table></figure>

<p>最后一行中利用 C 语言的 enum 特性减少了 NREG 对寄存器数组的 dependencies</p>
<p><strong>PA 框架代码中的 CPU_state</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">CPU_state</span> &#123;</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="comment">// C is not C++</span></span><br><span class="line"><span class="comment">// cannot declare &quot;CPU_state state&quot;;</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> reg_l(index) (cpu.gpr[check_reg_index(index)]._32)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> reg_w(index) (cpu.gpr[check_reg_index(index)]._16)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> reg_b(index) (cpu.gpr[check_reg_index(index) &amp; 0x3]._8[index &gt;&gt; 2])</span></span><br></pre></td></tr></table></figure>

<p>对于复杂的情况，struct&#x2F;union 是更好的设计</p>
<ul>
<li>担心性能(check_reg_index)？<ul>
<li>在超强的编译器优化面前，不存在的</li>
</ul>
</li>
</ul>
<p><strong>YEMU:模拟指令执行</strong></p>
<p>在时钟信号驱动下，根据 $(M,R)$ 更新系统的状态</p>
<p>RISC 处理器(以及实际的 CISC 处理器实现)：</p>
<ul>
<li>取值令(fetch): 读出 M[R[PC]] 的一条指令</li>
<li>译码(decode): 根据指令集规范解析指令的语义(顺便取出操作数)</li>
<li>执行(execute): 执行命令、运算后写回寄存器或内存</li>
</ul>
<p>最重要的就是实现 idex()</p>
<ul>
<li>在 PA 中最挣扎的地方</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (!is_halt(M[pc])) &#123;</span><br><span class="line">    idex();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>代码例子1</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">idex</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">if</span> ((M[pc] &gt;&gt; <span class="number">4</span>) == <span class="number">0</span>) &#123;</span><br><span class="line">    R[(M[pc] &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>] = R[M[pc] &amp; <span class="number">3</span>];</span><br><span class="line">    pc++;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((M[pc] &gt;&gt; <span class="number">4</span>) == <span class="number">1</span>) &#123;</span><br><span class="line">    R[(M[pc] &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>] += R[M[pc] &amp; <span class="number">3</span>];</span><br><span class="line">    pc++;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((M[pc] &gt;&gt; <span class="number">4</span>) == <span class="number">14</span>) &#123;</span><br><span class="line">    R[<span class="number">0</span>] = M[M[pc] &amp; <span class="number">0xf</span>]; </span><br><span class="line">    pc++;</span><br><span class="line">  &#125; <span class="keyword">else</span> <span class="keyword">if</span> ((M[pc] &gt;&gt; <span class="number">4</span>) == <span class="number">15</span>) &#123;</span><br><span class="line">    M[M[pc] &amp; <span class="number">0xf</span>] = R[<span class="number">0</span>];</span><br><span class="line">    pc++;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>代码例子2</strong></p>
<p>是否好一些？</p>
<ul>
<li>不言自明？不言自证？</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">idex</span><span class="params">()</span> &#123;</span><br><span class="line">  u8 inst = M[pc++];</span><br><span class="line">  u8 op = inst &gt;&gt; <span class="number">4</span>;</span><br><span class="line">  <span class="keyword">if</span> (op == <span class="number">0x0</span> || op == <span class="number">0x1</span>) &#123;</span><br><span class="line">    <span class="type">int</span> rt = (inst &gt;&gt; <span class="number">2</span>) &amp; <span class="number">3</span>, rs = (inst &amp; <span class="number">3</span>);</span><br><span class="line">    <span class="keyword">if</span>      (op == <span class="number">0x0</span>) R[rt]  = R[rs];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">0x1</span>) R[rt] += R[rs];</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">if</span> (op == <span class="number">0xe</span> || op == <span class="number">0xf</span>) &#123;</span><br><span class="line">    <span class="type">int</span> addr = inst &amp; <span class="number">0xf</span>;</span><br><span class="line">    <span class="keyword">if</span>      (op == <span class="number">0xe</span>) R[<span class="number">0</span>]    = M[addr];</span><br><span class="line">    <span class="keyword">else</span> <span class="keyword">if</span> (op == <span class="number">0xf</span>) M[addr] = R[<span class="number">0</span>];</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><strong>代码例子3</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">union</span> <span class="title">inst</span> &#123;</span></span><br><span class="line">  <span class="class"><span class="keyword">struct</span> &#123;</span> u8 rs  : <span class="number">2</span>, rt: <span class="number">2</span>, op: <span class="number">4</span>; &#125; rtype;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> &#123;</span> u8 addr: <span class="number">4</span>,        op: <span class="number">4</span>; &#125; mtype;</span><br><span class="line">&#125; <span class="type">inst_t</span>;</span><br><span class="line"><span class="meta">#<span class="keyword">define</span> RTYPE(i) u8 rt = (i)-&gt;rtype.rt, rs = (i)-&gt;rtype.rs;</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> MTYPE(i) u8 addr = (i)-&gt;mtype.addr;</span></span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">idex</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">inst_t</span> *cur = (<span class="type">inst_t</span> *)&amp;M[pc];</span><br><span class="line">  <span class="keyword">switch</span> (cur-&gt;rtype.op) &#123;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0b0000</span>: &#123; RTYPE(cur); R[rt]   = R[rs];   pc++; <span class="keyword">break</span>; &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0b0001</span>: &#123; RTYPE(cur); R[rt]  += R[rs];   pc++; <span class="keyword">break</span>; &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0b1110</span>: &#123; MTYPE(cur); R[RA]   = M[addr]; pc++; <span class="keyword">break</span>; &#125;</span><br><span class="line">  <span class="keyword">case</span> <span class="number">0b1111</span>: &#123; MTYPE(cur); M[addr] = R[RA];   pc++; <span class="keyword">break</span>; &#125;</span><br><span class="line">  <span class="keyword">default</span>: panic(<span class="string">&quot;invalid instruction at PC = %x&quot;</span>, pc);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>用到了 C 语言的一个特性：bit field，用一个类型的某些位来定义变量</p>
]]></content>
      <categories>
        <category>Computer System</category>
      </categories>
      <tags>
        <tag>基础学习</tag>
      </tags>
  </entry>
  <entry>
    <title>计算机系统基础1. C语言拾遗(1):机制</title>
    <url>/2023-04-25-computer_system1/</url>
    <content><![CDATA[<h4 id="概述"><a href="#概述" class="headerlink" title="概述"></a>概述</h4><p>这一节主要是弥补一些程序设计基础课上不会讲到的一些关于 C 语言的比较重要的知识，帮助构筑整体知识框架，以便后续学习计算机系统能更加顺利一些。——总共学习了四个半小时。</p>
<span id="more"></span>
<p><strong>以下几个问题值得思考：</strong></p>
<ul>
<li>在IDE中，按一个建就能编译运行，中间的过程是什么？<ul>
<li>编译、连接<ul>
<li>.c → 预编译 → .i → 编译 → .s → 汇编 → .o → 链接 → a.out</li>
</ul>
</li>
<li>加载执行<ul>
<li>.&#x2F;a.out</li>
</ul>
</li>
</ul>
</li>
<li>背后是通过调用命令行工具完成的<ul>
<li>RTFM: gcc –help; man gcc<ul>
<li>控制行为的三个选项：-E, -S, -c</li>
</ul>
</li>
</ul>
</li>
<li>注意点：<ul>
<li>预热：编译、链接、加载到底做了什么？</li>
<li>RTFSC 时需要关注的 C 语言特性</li>
</ul>
</li>
</ul>
<h4 id="进入-C-语言之前：预编译"><a href="#进入-C-语言之前：预编译" class="headerlink" title="进入 C 语言之前：预编译"></a>进入 C 语言之前：预编译</h4><h5 id="include-lt-gt-指令"><a href="#include-lt-gt-指令" class="headerlink" title="#include &lt;&gt;指令"></a>#include &lt;&gt;指令</h5><p>以下代码有什么区别？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;stdio.h&quot;</span></span></span><br></pre></td></tr></table></figure>

<p>为什么在没有安装库时会发生错误？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;SDL2/SDL2.h&gt;</span></span></span><br></pre></td></tr></table></figure>

<p>很多人包括我在刚开始学习 C 语言时，肯定会问出一些问题：在引用stdio.h时到底是引用在哪里的文件？</p>
<p>可能在书&#x2F;阅读材料上了解一些相关知识</p>
<ul>
<li>但更好的办法是阅读命令的日志</li>
<li>gcc –verbose a.c</li>
</ul>
<p>使用gcc –verbose可以了解到很多内部的东西，例如：</p>
<p>这张图片是我的电脑上运行gcc –verbose a.c后包含的一段，这段信息显示了gcc在编译a.c文件时头文件引用的发生，分别找的是这些路径下的文件</p>
<p><img src="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/gcc_verbose.png"></p>
<p>如果我有a.c和a.inc文件放在同一个路径下</p>
<figure class="highlight c"><figcaption><span>a.inc</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;hello world&quot;</span></span><br></pre></td></tr></table></figure>

<figure class="highlight c"><figcaption><span>a.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;a.inc&quot;</span></span></span><br><span class="line">);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p>然后使用gcc –verbose a.c后会发生什么？正确编译除了a.out，运行后输出hello world</p>
<p>如果把a.c改变一下，再编译就出现error了</p>
<figure class="highlight c"><figcaption><span>a.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span>&#123;</span><br><span class="line"><span class="built_in">printf</span>(</span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;a.inc&gt;</span></span></span><br><span class="line">);</span><br><span class="line">&#125; </span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/image-20230425090237647.png"></p>
<p>有一个命令选项-I可以添加gcc寻找#include &lt;…&gt;的路径，如果输入这些指令，编译通过，可以正常输出hello world。用gcc –verbose查看详细信息，发现#Include &lt;…&gt;多了一个path</p>
<p><img src="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/image-20230425090737466.png"></p>
<p><img src="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/image-20230425090859148.png"></p>
<h5 id="有趣的预编译"><a href="#有趣的预编译" class="headerlink" title="有趣的预编译"></a>有趣的预编译</h5><p>以下代码会输出什么？</p>
<ul>
<li>为什么？</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">if</span> aa == bb</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>运行结果是Yes，可以运行gcc -E a.c查看预编译代码，#include &lt;stdio.h&gt;中引用的内容太多了，这里只用到了其中的printf，可以用一行代码替换</p>
<figure class="highlight c"><figcaption><span>printf</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">printf</span> <span class="params">(<span class="type">const</span> <span class="type">char</span> *__restrict __format, ...)</span>;</span><br></pre></td></tr></table></figure>

<p>这是stdio.h中关于printf的定义，替换后再使用gcc -E a.c得到如下代码</p>
<p><img src="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/image-20230425092836183.png"></p>
<p>其中那几行#开头的代码都被消失了，实际上是预编译先对代码进行词法上做处理，#if判断后面是否为true，如果是true则包含#if下的代码。C语言的很有意思的特性是所有预编译的变量，都不需要定义就可以使用，所以这里实际上是判断 $’’&#x3D;&#x3D;’’$ 所以返回true，预编译后的代码包含printf(“Yes\n”)</p>
<p>还可以试试编译下面的代码，看看执行a.out后会输出什么，如果拿gcc -m32 a.c编译，又会输出什么？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">extern</span> <span class="type">int</span> <span class="title function_">printf</span> <span class="params">(<span class="type">const</span> <span class="type">char</span> *__restrict __format, ...)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line"><span class="meta">#<span class="keyword">ifdef</span> __x86_64__</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;x86-64\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;x86\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">if</span> aa == bb</span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;Yes\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">else</span></span></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;No\n&quot;</span>);</span><br><span class="line"><span class="meta">#<span class="keyword">endif</span></span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="宏定义与展开"><a href="#宏定义与展开" class="headerlink" title="宏定义与展开"></a>宏定义与展开</h5><p>宏展开：通过复制&#x2F;粘贴改变代码的形态</p>
<ul>
<li><p>#include→ 粘贴文件</p>
</li>
<li><p>aa,bb→ 粘贴符号</p>
</li>
</ul>
<p>知乎问题：如何搞垮一个OJ？</p>
<p>下面这段代码会在一行输出$1^7$个a，会占用大量OJ资源，但是我在我们学校的OJ上试验了一下，输出超限后会被程序好像会被强制中断，所以现在搞不垮了。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> A <span class="string">&quot;aaaaaaaaaa&quot;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> TEN(A) A A A A A A A A A A</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> B TEN(A)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> C TEN(B)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> D TEN(C)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> E TEN(D)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> F TEN(E)</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> G TEN(F)</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123; <span class="built_in">puts</span>(G); &#125;</span><br></pre></td></tr></table></figure>

<p>如何躲过Online Judge的关键字过滤？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> A sys ## tem</span></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  A(<span class="string">&quot;echo hello&quot;</span>);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>##的作用是在去除前后的所有空格，并且把前后非空格的两个部分按照连接起来，这样OJ就检测不到<code>system</code>这个单词了，但是实际上<code>system</code>已经起作用了，编译运行输出hello</p>
<p><img src="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/image-20230425232043043.png"></p>
<p>如何毁掉一个身边用C语言的同学？</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> true (__LINE__ % 16 != 0)</span></span><br></pre></td></tr></table></figure>

<p>这段代码的意思是改变true的定义，true变为当代码的行数模16不等于0返回真，这就会引起非常大的歧义，如果偷偷趁同学不在，在他的电脑上的某一个头文件中插入这段代码，将在某一天对他造成毁灭性的打击！</p>
<p>宏展开：通过复制&#x2F;粘贴改变代码的形态</p>
<ul>
<li>反复粘贴，直到没有宏可以展开为止</li>
</ul>
<p>例子：</p>
<figure class="highlight c"><figcaption><span>X-macro</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> NAMES(X) \</span></span><br><span class="line"><span class="meta">  X(Tom) X(Jerry) X(Tyke) X(Spike)</span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="meta">#<span class="keyword">define</span> PRINT(x) puts(<span class="string">&quot;Hello, &quot;</span> #x <span class="string">&quot;!&quot;</span>);</span></span><br><span class="line">  NAMES(PRINT)</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><u>其中#表示字符串化，#x相当于把x转换成字符串</u></p>
<p><img src="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/image-20230425233837276.png"></p>
<p>在发生实际编译之前</p>
<ul>
<li>也称为元编程(meta-programming)<ul>
<li>gcc的与处理器同样可以处理汇编代码</li>
<li>C++中的模板元编程；Rust的macros；…（这一块我基本看不懂，元编程和macros什么意思？）</li>
</ul>
</li>
</ul>
<p>Pros</p>
<ul>
<li>提供灵活的用法 (X-macros)</li>
<li>接近自然语言的写法</li>
</ul>
<p>Cons</p>
<ul>
<li>破坏可读性 <a href="https://www.ioccc.org/">IOCCC</a>、程序分析 (补全)、……</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">define</span> L (</span></span><br><span class="line"><span class="type">int</span> main L ) &#123; <span class="built_in">puts</span> L <span class="string">&quot;Hello, World&quot;</span> ); &#125;</span><br></pre></td></tr></table></figure>

<p>破坏了人类的直觉，造成括号不匹配，及其影响阅读</p>
<h4 id="编译与链接"><a href="#编译与链接" class="headerlink" title="编译与链接"></a>编译与链接</h4><h5 id="编译"><a href="#编译" class="headerlink" title="编译"></a>编译</h5><p>一个不带优化的简易（理想）编译器</p>
<ul>
<li>C代码的连续一段总能找到对应的一段连续的机器指令<ul>
<li>因此大家说C是高级的汇编语言</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">foo</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">  <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>编译之后对应的汇编语言大致如下（去除了一些不相干的代码）</p>
<figure class="highlight elm"><table><tr><td class="code"><pre><span class="line"><span class="title">foo</span>:</span><br><span class="line">.<span class="type">LFB0</span>:</span><br><span class="line">	pushq	%rbp</span><br><span class="line">	movq	%rsp, %rbp</span><br><span class="line">	movl	%edi, <span class="number">-20</span>(%rbp)</span><br><span class="line">	movl	$<span class="number">0</span>, <span class="number">-8</span>(%rbp)</span><br><span class="line">	movl	$<span class="number">1</span>, <span class="number">-4</span>(%rbp)</span><br><span class="line">	jmp	.<span class="type">L2</span></span><br><span class="line">.<span class="type">L3</span>:</span><br><span class="line">	movl	<span class="number">-4</span>(%rbp), %eax</span><br><span class="line">	addl	%eax, <span class="number">-8</span>(%rbp)</span><br><span class="line">	addl	$<span class="number">1</span>, <span class="number">-4</span>(%rbp)</span><br><span class="line">.<span class="type">L2</span>:</span><br><span class="line">	movl	<span class="number">-4</span>(%rbp), %eax</span><br><span class="line">	cmpl	<span class="number">-20</span>(%rbp), %eax</span><br><span class="line">	jle	.<span class="type">L3</span></span><br><span class="line">	movl	<span class="number">-8</span>(%rbp), %eax</span><br><span class="line">	popq	%rbp</span><br><span class="line">	ret</span><br></pre></td></tr></table></figure>

<p>C语言代码有一一对应的汇编代码，汇编代码对应机器代码，上面的程序用objdump转换为机器代码：</p>
<p><img src="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/image-20230425235744552.png"></p>
<h5 id="链接"><a href="#链接" class="headerlink" title="链接"></a>链接</h5><p>将多个二进制目标代码拼接在一起</p>
<ul>
<li>C中成为编译单元(compilation unit)</li>
<li>甚至可以连接 C++, <a href="https://rust-embedded.github.io/book/interoperability/rust-with-c.html">rust</a>, … 代码（不懂？_？）</li>
</ul>
<figure class="highlight c"><figcaption><span>a.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">foo</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">  <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++) &#123;</span><br><span class="line">    sum += i;</span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><figcaption><span>b.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">foo</span><span class="params">(<span class="type">int</span>)</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%d\n&quot;</span>, foo(<span class="number">10</span>));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/image-20230426000753133.png"></p>
<p>这是b.c汇编的代码，怎么把a.o和b.o中的代码合到一起？那就要用到链接，a.c中定义了foo函数，b.c中申明foo函数，并且在main函数调用foo函数输出结果</p>
<p>输入gcc a.o b.o -static，运行.&#x2F;a.out输出结果55</p>
<p>可以使用objdump反汇编a.out可以在其中找到main和foo的内容</p>
<h4 id="加载：进入C语言的世界"><a href="#加载：进入C语言的世界" class="headerlink" title="加载：进入C语言的世界"></a>加载：进入C语言的世界</h4><h5 id="C程序执行的两个视角"><a href="#C程序执行的两个视角" class="headerlink" title="C程序执行的两个视角"></a>C程序执行的两个视角</h5><p>静态：C代码的连续一段总能找到一段连续的机器指令</p>
<p>动态：C代码执行的状态总能对应到机器的状态</p>
<ul>
<li>源代码视角<ul>
<li>函数、变量、指针……</li>
</ul>
</li>
<li>机器指令视角<ul>
<li>寄存器、内存、地址……</li>
</ul>
</li>
</ul>
<p>两个视角的共同之处：内存</p>
<ul>
<li>代码、变量（源代码视角）&#x3D;地址+长度（机器指令视角）</li>
<li>（不太严谨地）内存&#x3D;代码+数据+堆栈<ul>
<li>因此理解C程序执行最重要的就是<u>内存模型</u></li>
</ul>
</li>
</ul>
<p><u>本质上C语言中的所有的东西都是指针</u>，C语言的一切皆可取地址，常量、变量、函数、堆栈……在汇编中所有东西都是内存，两个刚好对应起来。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">printptr</span><span class="params">(<span class="type">void</span> *p)</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;p = %p;  *p = %016lx\n&quot;</span>, p, *(<span class="type">long</span> *)p);</span><br><span class="line">&#125;</span><br><span class="line"><span class="type">int</span> x;</span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">  <span class="type">int</span> *p = (<span class="type">void</span> *) <span class="number">1</span>;</span><br><span class="line">  printptr(main);  <span class="comment">// 代码</span></span><br><span class="line">  printptr(&amp;main);</span><br><span class="line">  printptr(&amp;x);    <span class="comment">// 数据</span></span><br><span class="line">  printptr(&amp;argc); <span class="comment">// 堆栈</span></span><br><span class="line">  printptr(argv);</span><br><span class="line">  printptr(&amp;argv);</span><br><span class="line">  printptr(argv[<span class="number">0</span>]);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<h5 id="C-Type-System"><a href="#C-Type-System" class="headerlink" title="C Type System"></a>C Type System</h5><p><strong>类型：</strong>对一段内存的解读方式</p>
<ul>
<li>非常“汇编“——没有class,polymorphism,type traits,…（看不懂）</li>
<li>C里所有的数据都可以理解成是地址（指针）+类型（对地址的解读）</li>
</ul>
<p>例子：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">  <span class="type">int</span> (*f)(<span class="type">int</span>, <span class="type">char</span> *[]) = main;</span><br><span class="line">  <span class="keyword">if</span> (argc != <span class="number">0</span>) &#123;</span><br><span class="line">    <span class="type">char</span> ***a = &amp;argv, *first = argv[<span class="number">0</span>], ch = argv[<span class="number">0</span>][<span class="number">0</span>];</span><br><span class="line">    <span class="built_in">printf</span>(<span class="string">&quot;arg = \&quot;%s\&quot;;  ch = &#x27;%c&#x27;\n&quot;</span>, first, ch);</span><br><span class="line">    assert(***a == ch);</span><br><span class="line">    f(argc - <span class="number">1</span>, argv + <span class="number">1</span>);</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码可以画一张图去理解一下，其中比较有意思的是，函数作为指针、函数地址作为指针和*函数作为指针都是相同的</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, main);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, &amp;main);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;%p\n&quot;</span>, *main);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>这段代码输出结果是完全相同的，说明函数的指针就是指向自身</p>
<p>有意思的函数指针：</p>
<ul>
<li>当一个指针指向函数的时候，指针本身的地址没有改变，但是它指向一个指向函数的地址，函数的地址就是指向自身，所以一个上面例子中的f和(*f)甚至是(*****…*f)都起到main函数的作用，但是(&amp;f)就是取这个指针的地址。</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">foo</span><span class="params">(<span class="type">int</span> n)</span> &#123;</span><br><span class="line">  <span class="type">int</span> sum = <span class="number">0</span>;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">1</span>; i &lt;= n; i++)</span><br><span class="line">    sum += i;</span><br><span class="line">  <span class="keyword">return</span> sum;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">(<span class="type">int</span> argc, <span class="type">char</span> *argv[])</span> &#123;</span><br><span class="line">  <span class="type">int</span> (*f)(<span class="type">int</span>, <span class="type">char</span> *[]) = main;</span><br><span class="line"></span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&amp;foo = %p\n&quot;</span>, &amp;foo);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;foo  = %p\n&quot;</span>, foo);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;*foo = %p\n&quot;</span>, *foo);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;&amp;f   = %p\n&quot;</span>, &amp;f);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;f    = %p\n&quot;</span>, f);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;*f   = %p\n&quot;</span>, *f);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/image-20230426230857144.png"></p>
<p>第一节终于上完了，比第一次看要学会了不少新的细节，这周不再看计算机系统基础，遇到知识点就回来看这篇文章吸收。</p>
<p>推荐文章：<a href="https://iq.opengenus.org/function-pointer-in-c/">Function Pointer in C</a></p>
]]></content>
      <categories>
        <category>Computer System</category>
      </categories>
      <tags>
        <tag>基础学习</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统06. 并发控制基础</title>
    <url>/2023-04-27-operating_system6/</url>
    <content><![CDATA[<p><strong>背景回顾</strong>：虽然 “线程库” 入门简单，但多处理器编程 + 编译优化会给我们带来很多意想不到的惊喜。在编写多线程程序时，们必须放弃许多对顺序程序编程时的基本假设，这也是并发编程困难的原因。</p>
<span id="more"></span>

<p>人类是 sequential creature ，大脑非常难以适应并发。但是可以创造一些新的手段让我们可以写出正确的并发程序。</p>
<ul>
<li>手段：让并发”回退到“顺序执行<ul>
<li>标记若干块代码，使这些代码一定能按照某个顺序执行</li>
<li>例如：我们可以安全地在块里记录执行的顺序</li>
</ul>
</li>
</ul>
<h4 id="回退到顺序执行：互斥"><a href="#回退到顺序执行：互斥" class="headerlink" title="回退到顺序执行：互斥"></a>回退到顺序执行：互斥</h4><p>可以插入“神秘代码”，让其他所有代码不能并发，只让现在执行的东西顺序执行</p>
<ul>
<li>由“神秘代码”领导的不会并发的代码（例如pure function       s）执行</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">Tsum</span><span class="params">()</span> &#123;</span><br><span class="line">  stop_the_world();</span><br><span class="line">  <span class="comment">// 临界区 critical section</span></span><br><span class="line">  sum++;</span><br><span class="line">  resume_the_world();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>Stop the world is possible</p>
<ul>
<li>Java有”stop the world GC”</li>
<li>单个处理器可以关闭终端</li>
<li>多处理器可以发送核间中断</li>
</ul>
<h5 id="失败的尝试："><a href="#失败的尝试：" class="headerlink" title="失败的尝试："></a>失败的尝试：</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> locked = UNLOCK;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">critical_section</span><span class="params">()</span> &#123;</span><br><span class="line">retry:</span><br><span class="line">  <span class="keyword">if</span> (locked != UNLOCK) &#123;</span><br><span class="line">    <span class="keyword">goto</span> retry;</span><br><span class="line">  &#125;</span><br><span class="line">  locked = LOCK;</span><br><span class="line"></span><br><span class="line">  <span class="comment">// critical section</span></span><br><span class="line"></span><br><span class="line">  locked = UNLOCK;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>并发程序不能保证load+store的原子性，可以画状态机找到一种执行顺序证明上面的代码是不可以保证互斥的。</p>
<h5 id="更严肃地尝试：确定假设、设计算法"><a href="#更严肃地尝试：确定假设、设计算法" class="headerlink" title="更严肃地尝试：确定假设、设计算法"></a>更严肃地尝试：确定假设、设计算法</h5><p><strong>假设：内存的读&#x2F;写可以保证顺序、原子完成</strong></p>
<ul>
<li>val &#x3D; atomic_load(ptr)<ul>
<li>看一眼某个地方的纸条（只能看到这个瞬间的字）</li>
<li>刚看完可能就会被修改</li>
</ul>
</li>
<li>atomic_store(ptr, val)<ul>
<li>对应往某个地方“贴一张纸条”（闭眼盲贴，不管这个地方在发生什么）</li>
<li>贴完一瞬间就可能被覆盖</li>
</ul>
</li>
</ul>
<p><strong>正确性不明的奇怪尝试（Peterson算法）</strong></p>
<p>类比为 A 和 B 争用厕所的包间</p>
<ul>
<li>想进入包厢之前，A&#x2F;B都先举起自己的旗子<ul>
<li>A 往厕所门上贴上“B正在使用”的标签</li>
<li>B 往厕所门上贴上“A正在使用”的标签</li>
</ul>
</li>
<li>然后，<strong>如果对方举着旗子，而且厕所门上的名字是对方</strong>，等待<ul>
<li>否则可以进入包厢</li>
</ul>
</li>
<li>出包厢后，放下自己的旗子（完全不管门上的标签）</li>
</ul>
<p>进入临界区的情况：</p>
<ul>
<li>只有一个人举旗子，就可以直接进入</li>
<li>如果两个人同时举旗，由厕所门上的标签决定谁进<ul>
<li>手快🈶（被另一个人覆盖）、手慢🈚</li>
</ul>
</li>
</ul>
<p>一些具体的细节情况</p>
<ul>
<li>A 看到 B 没有举旗<ul>
<li>B 一定不在临界区</li>
<li>或者 B 想进但还没来得及把“A 正在使用”贴在门上</li>
</ul>
</li>
<li>A 看到 B 举旗<ul>
<li>A 一定已经把旗子举起来了</li>
<li>and so on ……</li>
</ul>
</li>
</ul>
<p>Prove by brute-force</p>
<ul>
<li>枚举状态机的全部状态（$PC_1,PC_2,x,y,trun$）CRAZY~~</li>
<li>但是手写还是容易写错——可执行的状态机模型有用了！</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">TA</span><span class="params">()</span> &#123; <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">/* ❶ */</span>  x = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/* ❷ */</span>  turn = B;</span><br><span class="line"><span class="comment">/* ❸ */</span>  <span class="keyword">while</span> (y &amp;&amp; turn == B) ;</span><br><span class="line"><span class="comment">/* ❹ */</span>  x = <span class="number">0</span>; &#125; &#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">TB</span><span class="params">()</span> &#123; <span class="keyword">while</span> (<span class="number">1</span>) &#123;</span><br><span class="line"><span class="comment">/* ① */</span>  y = <span class="number">1</span>;</span><br><span class="line"><span class="comment">/* ② */</span>  turn = A;</span><br><span class="line"><span class="comment">/* ③ */</span>  <span class="keyword">while</span> (x &amp;&amp; turn == A) ;</span><br><span class="line"><span class="comment">/* ④ */</span>  y = <span class="number">0</span>; &#125; &#125;</span><br></pre></td></tr></table></figure>



<h4 id="模型、模型检验与现实"><a href="#模型、模型检验与现实" class="headerlink" title="模型、模型检验与现实"></a>模型、模型检验与现实</h4><h5 id="自动遍历状态空间的乐趣"><a href="#自动遍历状态空间的乐趣" class="headerlink" title="自动遍历状态空间的乐趣"></a>自动遍历状态空间的乐趣</h5><p>可以帮助我们快速回答更多问题</p>
<ul>
<li>如果结束后把门上的字条撕掉，算法还正确吗？<ul>
<li>在放下旗子之前撕</li>
<li>在放下旗子之后撕</li>
</ul>
</li>
<li>如果先贴标签再举旗，算法还正确吗？</li>
<li>我们有两个 “查看” 的操作<ul>
<li>看对方的旗有没有举起来</li>
<li>看门上的贴纸是不是自己</li>
<li>这两个操作的顺序影响算法的正确性吗？</li>
</ul>
</li>
<li>是否存在 “两个人谁都无法进入临界区” (liveness)、“对某一方不公平” (fairness) 等行为？</li>
</ul>
<blockquote>
<p>把状态机看作图的节点，从一个状态机转化到另一个状态机实际上就是两个节点之间有一条有向边，每一个帧PC从一个节点到下一个节点（一个状态机转换为下一个状态机）。</p>
<p>因此类似上面的问题可以转换成图（状态空间）上的遍历问题了！</p>
</blockquote>
<h5 id="回到假设（体现在模型）"><a href="#回到假设（体现在模型）" class="headerlink" title="回到假设（体现在模型）"></a>回到假设（体现在模型）</h5><ul>
<li><p>Atomic load &amp; store</p>
<ul>
<li>读&#x2F;写单个全局变量是“原子不可分割”的</li>
<li>但这个假设在现代多处理器上并不成立</li>
</ul>
</li>
<li><p>所以<strong>实际上按照模型直接写Peterson算法应该是错的</strong>？</p>
</li>
</ul>
<p>“实现正确的Peterson算法”是合理需求，它一定能实现</p>
<ul>
<li>Compiler barrier&#x2F;volatile 保证不被优化的前提下<ul>
<li>处理器提供特殊的指令保证可见性</li>
<li>编译器提供 __sync_synchronize()函数<ul>
<li>x86: mfence; ARM: dmb ish; RISC-V: fence rw, rw</li>
<li>同时含有一个compiler barrier</li>
</ul>
</li>
</ul>
</li>
</ul>
<h4 id="原子指令"><a href="#原子指令" class="headerlink" title="原子指令"></a>原子指令</h4><h5 id="并发编程困难的解决"><a href="#并发编程困难的解决" class="headerlink" title="并发编程困难的解决"></a>并发编程困难的解决</h5><p>普通的变量读写在编译器+处理器的双重优化下行为变得复杂</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">retry:</span><br><span class="line">  <span class="keyword">if</span> (locked != UNLOCK) &#123;</span><br><span class="line">    <span class="keyword">goto</span> retry;</span><br><span class="line">  &#125;</span><br><span class="line">  locked = LOCK;</span><br></pre></td></tr></table></figure>

<p>解决方法：编译器和硬件共同提供”不可优化、不可打断“的指令</p>
<ul>
<li>“原子指令” + compiler barrier</li>
</ul>
<p>之前的<code>sum.c</code>修改如下部分，就可以实现正确的求和</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; N; i++)</span><br><span class="line">  <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(<span class="string">&quot;lock incq %0&quot;</span> : <span class="string">&quot;+m&quot;</span>(sum))</span>;</span><br></pre></td></tr></table></figure>

<p>“Bus lock”——从 80386 开始引入 (bus control signal)</p>
<p><img src="https://jyywiki.cn/pages/OS/img/80486-arch.jpg" alt="bus control signal"></p>
<h4 id="Take-away-Messages"><a href="#Take-away-Messages" class="headerlink" title="Take-away Messages"></a>Take-away Messages</h4><p>并发编程 “很难”：想要完全理解并发程序的行为，是非常困难的——我们甚至可以利用一个 “万能” 的调度器去帮助我们求解 NP-完全问题。因此，人类应对这种复杂性的方法就是退回到不并发。通过互斥实现 stop&#x2F;resume the world，我们就可以使并发程序的执行变得更容易理解——而只要程序中 “能并行” 的部分足够多，串行化一小部分也并不会对性能带来致命的影响。</p>
]]></content>
      <categories>
        <category>Operating System</category>
      </categories>
      <tags>
        <tag>基础学习</tag>
      </tags>
  </entry>
  <entry>
    <title>操作系统07. 并发控制互斥</title>
    <url>/2023-04-27-operating_system7/</url>
    <content><![CDATA[<p><strong>背景回顾</strong>：互斥 (Peterson 算法)：为了掌控并发程序的复杂行为，使程序退回到 “串行执行” 的 lock &amp; unlock。</p>
<p><strong>本节内容：</strong>现代多处理器系统上的互斥实现：</p>
<ul>
<li>互斥问题的定义和假设</li>
<li>自旋锁</li>
<li>互斥锁和Futex</li>
</ul>
<span id="more"></span>

<h4 id="回顾：并发编程"><a href="#回顾：并发编程" class="headerlink" title="回顾：并发编程"></a>回顾：并发编程</h4><h5 id="理解并发的工具"><a href="#理解并发的工具" class="headerlink" title="理解并发的工具"></a>理解并发的工具</h5><ul>
<li>线程&#x3D;人(大脑能完成局部存储和计算)</li>
<li>共享内存&#x3D;物理世界(物理世界天生并行)</li>
<li>一切都是状态机(debugger&amp;model checker)</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/wc.jpg" alt="“躲进厕所锁上门，我就把全世界人锁在了厕所外“"></p>
<h5 id="互斥问题：定义"><a href="#互斥问题：定义" class="headerlink" title="互斥问题：定义"></a>互斥问题：定义</h5><p>互斥(mutual exclusion)，“互相排斥”</p>
<ul>
<li>实现lock_t 数据结构和lock&#x2F;unlock API:</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">typedef</span> <span class="class"><span class="keyword">struct</span> &#123;</span></span><br><span class="line">  ...</span><br><span class="line">&#125; <span class="type">lock_t</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">lock</span><span class="params">(<span class="type">lock_t</span> *lk)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">unlock</span><span class="params">(<span class="type">lock_t</span> *lk)</span>;</span><br></pre></td></tr></table></figure>

<p>一把“排他性”的锁——对于锁对象lk</p>
<ul>
<li>如果某个线程持有锁，则其他线程的lock不能发挥(Safety)</li>
<li>如果多个线程执行lock时，至少有一个可以返回(Liveness)</li>
<li>能正确处理处理器乱序、宽松内存模型和编译优化</li>
</ul>
<p>非常常见的一个bug：</p>
<p>一个线程用lock_A和unlock_A保护，其他进程如果也用lock_A和unlock_A锁的话就无法操作，但是如果其他线程用一个lock_B和unlock_B保护，那就可能造成lock_A和unlock_A之间与lock_B和unlock_B之间有重叠的数据可能会同时被两个线程访问到，就会产生错误的结果。</p>
<h5 id="互斥问题的经典算法"><a href="#互斥问题的经典算法" class="headerlink" title="互斥问题的经典算法"></a>互斥问题的经典算法</h5><p><strong>Peterson算法</strong></p>
<ul>
<li>包间、旗子和门上的字条</li>
<li>假设atomic load&#x2F;store<ul>
<li>实现这个假设也不是非常容易</li>
</ul>
</li>
</ul>
<p>因此，<u>假设很重要</u></p>
<ul>
<li>不能同时读&#x2F;写贡献内存(1960s)不是一个好的假设<ul>
<li>Load(环顾四周)的时候不能写，“看一眼就把眼睛壁上”</li>
<li>Store(改变物理世界状态)的时候不能读，“闭着眼睛动手”</li>
<li>这是《操作系统》<ul>
<li>更喜欢直观、简单、粗暴(稳定)、有效的解决方法</li>
</ul>
</li>
</ul>
</li>
</ul>
<h5 id="实现互斥的基本假设"><a href="#实现互斥的基本假设" class="headerlink" title="实现互斥的基本假设"></a>实现互斥的基本假设</h5><p>允许我们可以不管一切麻烦事的原子指令</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">atomic_inc</span><span class="params">(<span class="type">long</span> *ptr)</span>;</span><br><span class="line"><span class="type">int</span> <span class="title function_">atomic_xchg</span><span class="params">(<span class="type">int</span> val, <span class="type">int</span> *ptr)</span>;</span><br></pre></td></tr></table></figure>


<p>看起来是一个普通的函数，但假设：</p>
<ul>
<li>包含一个原子指令<ul>
<li>指令的执行不能被打断</li>
</ul>
</li>
<li>包含一个compiler barrier<ul>
<li>无论何种优化都不可雨果此函数</li>
</ul>
</li>
<li>包含一个memory fence<ul>
<li>保证处理器在stop-the world前所有对内存的store都“生效”</li>
<li>即对resume-the-world之后的load可见</li>
</ul>
</li>
</ul>
<figure class="highlight c"><figcaption><span>Atomic Exchange实现</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> <span class="title function_">xchg</span><span class="params">(<span class="type">int</span> <span class="keyword">volatile</span> *ptr, <span class="type">int</span> newval)</span> &#123;</span><br><span class="line">  <span class="type">int</span> result;</span><br><span class="line">  <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="comment">// 指令自带 memory barrier</span></span></span><br><span class="line"><span class="params">    <span class="string">&quot;lock xchgl %0, %1&quot;</span></span></span><br><span class="line"><span class="params">    : <span class="string">&quot;+m&quot;</span>(*ptr), <span class="string">&quot;=a&quot;</span>(result)</span></span><br><span class="line"><span class="params">    : <span class="string">&quot;1&quot;</span>(newval)</span></span><br><span class="line"><span class="params">    <span class="comment">// Compiler barrier</span></span></span><br><span class="line"><span class="params">    : <span class="string">&quot;memory&quot;</span></span></span><br><span class="line"><span class="params">  )</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<blockquote>
<p>原子指令是一个非常好的东西，我们程序的执行过程当中的任何时候，执行了原子指令，两条原子指令是有因果关系的，先执行的原子指令之前的所有内容在第二条原子指令之后都要是可见的。</p>
<p>在任何时候使用原子指令都是安全的，前提是原子指令是正确的。</p>
</blockquote>
<h4 id="自旋锁-Spin-Lock"><a href="#自旋锁-Spin-Lock" class="headerlink" title="自旋锁(Spin Lock)"></a>自旋锁(Spin Lock)</h4><h5 id="实现互斥"><a href="#实现互斥" class="headerlink" title="实现互斥"></a>实现互斥</h5><figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">void</span> <span class="title function_">lock</span><span class="params">(<span class="type">lock_t</span> *lk)</span>;</span><br><span class="line"><span class="type">void</span> <span class="title function_">unlock</span><span class="params">(<span class="type">lock_t</span> *lk)</span>;</span><br></pre></td></tr></table></figure>

<p>一个科学家的思维应该是：考虑更多更根本的问题</p>
<ul>
<li>我们可以设计出怎么样的原子指令？<ul>
<li>它们的表达能力如何？</li>
</ul>
</li>
<li>计算机硬件可以提供比“一次load&#x2F;store”更强的原子性吗？<ul>
<li>如果硬件困难，软件&#x2F;编译器可以么？</li>
</ul>
</li>
</ul>
<h5 id="自旋锁：用xchg实现互斥"><a href="#自旋锁：用xchg实现互斥" class="headerlink" title="自旋锁：用xchg实现互斥"></a>自旋锁：用xchg实现互斥</h5><p>在厕所门口放一个桌子(共享变量)</p>
<ul>
<li>初始时放着🔑</li>
</ul>
<p>自旋锁(Spin Lock)</p>
<ul>
<li>想上厕所的同学(一条xchg指令)<ul>
<li>Stop the world</li>
<li>看一眼桌子上有什么(🔑 或 🔞)</li>
<li>把 🔞 放到桌上 (覆盖之前有的任何东西)</li>
<li>Resume the world</li>
<li>期间看到🔑才可以进厕所，否则重复</li>
</ul>
</li>
<li>出厕所的同学<ul>
<li>把🔑放到桌上</li>
</ul>
</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="type">int</span> table = YES;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">retry:</span><br><span class="line">  <span class="type">int</span> got = xchg(&amp;table, NOPE);</span><br><span class="line">  <span class="keyword">if</span> (got == NOPE)</span><br><span class="line">    <span class="keyword">goto</span> retry;</span><br><span class="line">  assert(got == YES);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">  xchg(&amp;table, YES);  <span class="comment">// 为什么不是 table = YES; ?</span></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>在xchg的假设下简化实现</p>
<ul>
<li>包含一个原子指令</li>
<li>包含一个compiler barrier</li>
<li>包含一个memory fence</li>
</ul>
<figure class="highlight c"><figcaption><span>sum-spinlock.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&quot;thread.h&quot;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> N 100000000</span></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> M 10</span></span><br><span class="line"></span><br><span class="line"><span class="type">long</span> sum = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">xchg</span><span class="params">(<span class="type">int</span> <span class="keyword">volatile</span> *ptr, <span class="type">int</span> newval)</span> &#123;</span><br><span class="line">  <span class="type">int</span> result;</span><br><span class="line">  <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="string">&quot;lock xchgl %0, %1&quot;</span></span></span><br><span class="line"><span class="params">    : <span class="string">&quot;+m&quot;</span>(*ptr), <span class="string">&quot;=a&quot;</span>(result)</span></span><br><span class="line"><span class="params">    : <span class="string">&quot;1&quot;</span>(newval)</span></span><br><span class="line"><span class="params">    : <span class="string">&quot;memory&quot;</span></span></span><br><span class="line"><span class="params">  )</span>;</span><br><span class="line">  <span class="keyword">return</span> result;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> locked = <span class="number">0</span>;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">lock</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">while</span> (xchg(&amp;locked, <span class="number">1</span>)) ;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">unlock</span><span class="params">()</span> &#123;</span><br><span class="line">  xchg(&amp;locked, <span class="number">0</span>);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">Tsum</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="type">long</span> nround = N / M;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; nround; i++) &#123;</span><br><span class="line">    lock();</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> j = <span class="number">0</span>; j &lt; M; j++) &#123;</span><br><span class="line">      sum++;  <span class="comment">// Non-atomic; can optimize</span></span><br><span class="line">    &#125;</span><br><span class="line">    unlock();</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  assert(N % M == <span class="number">0</span>);</span><br><span class="line">  create(Tsum);</span><br><span class="line">  create(Tsum);</span><br><span class="line">  join();</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;sum = %ld\n&quot;</span>, sum);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<figure class="highlight c"><figcaption><span>thread.h</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdlib.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;string.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdatomic.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;unistd.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;pthread.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="keyword">define</span> NTHREAD 64</span></span><br><span class="line"><span class="class"><span class="keyword">enum</span> &#123;</span> T_FREE = <span class="number">0</span>, T_LIVE, T_DEAD, &#125;;</span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thread</span> &#123;</span></span><br><span class="line">  <span class="type">int</span> id, status;</span><br><span class="line">  <span class="type">pthread_t</span> thread;</span><br><span class="line">  <span class="type">void</span> (*entry)(<span class="type">int</span>);</span><br><span class="line">&#125;;</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">thread</span> <span class="title">tpool</span>[<span class="title">NTHREAD</span>], *<span class="title">tptr</span> =</span> tpool;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> *<span class="title function_">wrapper</span><span class="params">(<span class="type">void</span> *arg)</span> &#123;</span><br><span class="line">  <span class="class"><span class="keyword">struct</span> <span class="title">thread</span> *<span class="title">thread</span> =</span> (<span class="keyword">struct</span> thread *)arg;</span><br><span class="line">  thread-&gt;entry(thread-&gt;id);</span><br><span class="line">  <span class="keyword">return</span> <span class="literal">NULL</span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">create</span><span class="params">(<span class="type">void</span> *fn)</span> &#123;</span><br><span class="line">  assert(tptr - tpool &lt; NTHREAD);</span><br><span class="line">  *tptr = (<span class="keyword">struct</span> thread) &#123;</span><br><span class="line">    .id = tptr - tpool + <span class="number">1</span>,</span><br><span class="line">    .status = T_LIVE,</span><br><span class="line">    .entry = fn,</span><br><span class="line">  &#125;;</span><br><span class="line">  pthread_create(&amp;(tptr-&gt;thread), <span class="literal">NULL</span>, wrapper, tptr);</span><br><span class="line">  ++tptr;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">join</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> i = <span class="number">0</span>; i &lt; NTHREAD; i++) &#123;</span><br><span class="line">    <span class="class"><span class="keyword">struct</span> <span class="title">thread</span> *<span class="title">t</span> =</span> &amp;tpool[i];</span><br><span class="line">    <span class="keyword">if</span> (t-&gt;status == T_LIVE) &#123;</span><br><span class="line">      pthread_join(t-&gt;thread, <span class="literal">NULL</span>);</span><br><span class="line">      t-&gt;status = T_DEAD;</span><br><span class="line">    &#125;</span><br><span class="line">  &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line">__attribute__((destructor)) <span class="type">void</span> <span class="title function_">cleanup</span><span class="params">()</span> &#123;</span><br><span class="line">  join();</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p>上面用自旋锁优化的sum-spinlock.c可以编译成功，输出正确结果</p>
<p><img src="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/image-20230427122620575.png"></p>
<p>可以验证，无论是O2优化还是O1优化都可以输出正确的结果，自旋锁目前为止是可以处理编译优化的。lock和unlock内没有compiler barrier里面的代码是可以优化的</p>
<h5 id="无锁算法-了解"><a href="#无锁算法-了解" class="headerlink" title="无锁算法(了解)"></a>无锁算法(了解)</h5><p><strong>更强大的原子指令</strong></p>
<p>Compare and exchange(“test and set”)</p>
<ul>
<li>(lock) compxchg SRC, DEST</li>
</ul>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">TEMP = DEST</span><br><span class="line"><span class="keyword">if</span> accumulator == TEMP:</span><br><span class="line">    ZF = <span class="number">1</span></span><br><span class="line">    DEST = SRC</span><br><span class="line"><span class="keyword">else</span>:</span><br><span class="line">    ZF = <span class="number">0</span></span><br><span class="line">    accumulator = TEMP</span><br></pre></td></tr></table></figure>

<ul>
<li>🤔 看起来没有复杂多少，又好像复杂了很多<ul>
<li>学编程&#x2F;操作系统”纸面理解“是不行的</li>
<li>一定要写代码加深印象<ul>
<li>对于这个例子：我们可以列出“真值表”</li>
</ul>
</li>
</ul>
</li>
</ul>
<figure class="highlight c"><figcaption><span>cmpoxchg.c</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="keyword">include</span> <span class="string">&lt;assert.h&gt;</span></span></span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmpxchg</span><span class="params">(<span class="type">int</span> old, <span class="type">int</span> new, <span class="type">int</span> <span class="keyword">volatile</span> *ptr)</span> &#123;</span><br><span class="line">  <span class="keyword">asm</span> <span class="title function_">volatile</span><span class="params">(</span></span><br><span class="line"><span class="params">    <span class="string">&quot;lock cmpxchgl %[new], %[mem]&quot;</span></span></span><br><span class="line"><span class="params">      : <span class="string">&quot;+a&quot;</span>(old), [mem] <span class="string">&quot;+m&quot;</span>(*ptr)</span></span><br><span class="line"><span class="params">      : [new] <span class="string">&quot;S&quot;</span>(new)</span></span><br><span class="line"><span class="params">      : <span class="string">&quot;memory&quot;</span></span></span><br><span class="line"><span class="params">  )</span>;</span><br><span class="line">  <span class="keyword">return</span> old;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">cmpxchg_ref</span><span class="params">(<span class="type">int</span> old, <span class="type">int</span> new, <span class="type">int</span> <span class="keyword">volatile</span> *ptr)</span> &#123;</span><br><span class="line">  <span class="type">int</span> tmp = *ptr;  <span class="comment">// Load</span></span><br><span class="line">  <span class="keyword">if</span> (tmp == old) &#123;</span><br><span class="line">    *ptr = new;  <span class="comment">// Store (conditionally)</span></span><br><span class="line">  &#125;</span><br><span class="line">  <span class="keyword">return</span> tmp;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">void</span> <span class="title function_">run_test</span><span class="params">(<span class="type">int</span> x, <span class="type">int</span> old, <span class="type">int</span> new)</span> &#123;</span><br><span class="line">  <span class="type">int</span> val1 = x;</span><br><span class="line">  <span class="type">int</span> ret1 = cmpxchg(old, new, &amp;val1);</span><br><span class="line"></span><br><span class="line">  <span class="type">int</span> val2 = x;</span><br><span class="line">  <span class="type">int</span> ret2 = cmpxchg_ref(old, new, &amp;val2);</span><br><span class="line"></span><br><span class="line">  assert(val1 == val2 &amp;&amp; ret1 == ret2);</span><br><span class="line">  <span class="built_in">printf</span>(<span class="string">&quot;x = %d -&gt; (cmpxchg %d -&gt; %d) -&gt; x = %d\n&quot;</span>, x, old, new, val1);</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="type">int</span> <span class="title function_">main</span><span class="params">()</span> &#123;</span><br><span class="line">  <span class="keyword">for</span> (<span class="type">int</span> x = <span class="number">0</span>; x &lt;= <span class="number">2</span>; x++)</span><br><span class="line">    <span class="keyword">for</span> (<span class="type">int</span> old = <span class="number">0</span>; old &lt;= <span class="number">2</span>; old++)</span><br><span class="line">      <span class="keyword">for</span> (<span class="type">int</span> new = <span class="number">0</span>; new &lt;= <span class="number">2</span>; new++)</span><br><span class="line">        run_test(x, old, new);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>

<p><img src="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/image-20230510124338922.png"></p>
<h4 id="在操作系统上实现互斥"><a href="#在操作系统上实现互斥" class="headerlink" title="在操作系统上实现互斥"></a>在操作系统上实现互斥</h4><h5 id="自旋锁的缺陷"><a href="#自旋锁的缺陷" class="headerlink" title="自旋锁的缺陷"></a>自旋锁的缺陷</h5><p>性能问题(1)</p>
<ul>
<li>除了进入临界区的线程，其他处理器上的线程都在<strong>空转</strong></li>
<li>争抢锁的处理器越多，利用率越低<ul>
<li>4 个 CPU 运行 4 个 sum-spinlock 和 1 个 OBS<ul>
<li>人一时刻都只有一个 sum-atomic 在有效计算</li>
</ul>
</li>
<li>均分 CPU, OBS 就分不到 100% 的 CPU 了</li>
</ul>
</li>
</ul>
<p>性能问题(2)</p>
<ul>
<li>持有自选锁的线程<strong>可能被操作系统切换出去</strong><ul>
<li>操作系统不”感知”线程在做什么</li>
<li>(但为什么不能呢？)</li>
</ul>
</li>
<li>实现 100% 的资源浪费</li>
</ul>
<h5 id="Scalability-性能的新维度"><a href="#Scalability-性能的新维度" class="headerlink" title="Scalability: 性能的新维度"></a>Scalability: 性能的新维度</h5><blockquote>
<p>同一份计算任务，时间 (CPU cycles) 和空间 (mapped memory) 会随处理器数量的增长而变化。</p>
</blockquote>
<p>用自旋锁实现 sum++ 的性能问题</p>
<ul>
<li>严谨的统计很难<ul>
<li>CPU 动态功耗</li>
<li>系统的其他进程</li>
<li>超线程</li>
<li>NUMA</li>
<li>……</li>
<li><a href="https://gernot-heiser.org/benchmarking-crimes.html">Benchmarking crimes</a></li>
</ul>
</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/spinlock-scalability.jpg"></p>
<p><img src="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/image-20230510130507698.png"></p>
<p>线程越多，效率越低，用本地代码去测试也有这种情况，为什么会发生这种情况？一个很重要的原因是现代的处理器是有缓存的，当我们想要读 sum 或者写 sum 都是从一级缓存中读出的，但是当另一个线程想要读不在这个处理器缓存中的 sum 时，就需要去另一个 CPU 的缓存中拉下来，传的过程就会产生时间，很有趣的 Scalability 的讨论</p>
<h5 id="自旋锁的使用场景"><a href="#自旋锁的使用场景" class="headerlink" title="自旋锁的使用场景"></a>自旋锁的使用场景</h5><ol>
<li>临界区几乎不“拥堵”</li>
<li>持有自旋锁时禁止执行流切换</li>
</ol>
<p>使用场景**(唯一)<strong>：</strong>操作系统内和的并发数据结构（短临界区）**</p>
<ul>
<li>操作系统可以关闭中断和抢占(仔细读起来这个行为是不合理的)<ul>
<li>保证自旋锁的持有者在很短的时间内可以释放锁</li>
</ul>
</li>
<li>(如果是虚拟机呢…😂)<ul>
<li>PAUSE 指令会处罚 VM Exit</li>
</ul>
</li>
<li>但依旧很难做好<ul>
<li><a href="https://www.usenix.org/conference/osdi10/analysis-linux-scalability-many-cores">An analysis of Linux scalability to many cores</a> (OSDI’10)</li>
</ul>
</li>
</ul>
<h5 id="实现线程-长临界区的互斥"><a href="#实现线程-长临界区的互斥" class="headerlink" title="实现线程 + 长临界区的互斥"></a>实现线程 + 长临界区的互斥</h5><blockquote>
<p>作业那么多，与其干等作业发布，不如把自己 (CPU) 让给其他作业 (线程) 执行？</p>
</blockquote>
<p>“让”不是 C 语言代码可以做到的 (C 代码只能执行命令)</p>
<ul>
<li>但有一种特殊的指令：syscall</li>
<li>把锁的实现放到操作系统里就好了<ul>
<li>syscall(SYSCALL_lock, &amp;lk);<ul>
<li>试图获得 1k，但如果失败，就切换到其他进程</li>
</ul>
</li>
<li>syscall(SYSCALL_unlock, &amp;1k);<ul>
<li>释放 1k，如果有等待锁的线程就唤醒</li>
</ul>
</li>
</ul>
</li>
</ul>
<p>操作系统 &#x3D; 更衣室管理员</p>
<p><img src="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/locker.jpg"></p>
<ul>
<li>先到的人(线程)<ul>
<li>成功获得手环，进入游泳馆</li>
<li>*1k &#x3D; 🔒，系统调用直接返回</li>
</ul>
</li>
<li>后到的人(线程)<ul>
<li>不能进入游泳馆，排队等待</li>
<li>线程放入等待队列，执行线程切换(yield)</li>
</ul>
</li>
<li>洗完澡出来的人(线程)<ul>
<li>交还手环给管理员；管理员把手环再交给排队的人</li>
<li>如果等待队列不空，从等待队列中取出一个线程允许执行</li>
<li>如果等待队列为空，*1k &#x3D; ✅</li>
</ul>
</li>
<li><strong>管理员 (OS) 使用自旋锁确保自己处理手环的过程是原子的</strong></li>
</ul>
<h4 id="关于互斥的一些分析"><a href="#关于互斥的一些分析" class="headerlink" title="关于互斥的一些分析"></a>关于互斥的一些分析</h4><p>自旋锁(线程直接共享 locked)</p>
<ul>
<li>更快的 fast path<ul>
<li>xchg 成功→立即进入临界区，开小很小</li>
</ul>
</li>
<li>更慢的 slow path<ul>
<li>xchg 失败→浪费 CPU 自旋等待</li>
</ul>
</li>
</ul>
<p>互斥锁(通过系统调用访问 locked)</p>
<ul>
<li>更经济的 slow path<ul>
<li>上锁失败线程不再占用 CPU</li>
</ul>
</li>
<li>更慢的 fast path<ul>
<li>即使上锁成功也需要进出内核 (syscall)</li>
</ul>
</li>
</ul>
<hr>
<p>为了实现现代多处理器系统上的互斥，我们首先需要理解 “原子操作” (例如 <code>atomic_xchg</code>) 的假设：</p>
<ol>
<li>操作本身是原子的、看起来无法被打断的，即它真的是一个 “原子操作”；</li>
<li>操作自带一个 compiler barrier，防止优化跨过函数调用。这一点很重要——例如我们今天的编译器支持 Link-time Optimization (LTO)，如果缺少 compiler barrier，编译优化可以穿过 volatile 标记的汇编指令；</li>
<li>操作自带一个 memory barrier，保证操作执行前指令的写入，能对其他处理器之后的 load 可见。</li>
</ol>
<p>在此假设的基础上，原子操作就成为了我们简化程序执行的基础机制。通过自旋 (spin)，可以很直观地实现 “轮询” 式的互斥。而为了节约共享内存线程在自旋上浪费的处理器，我们也可以通过系统调用请求操作系统来帮助现成完成互斥。</p>
<p>以上就是本节的所有内容，中间因为各种原因隔了十多天才全部看完，这段间隔也让我发现了前导知识的缺陷，线程库的那一章被我跳过了，我感觉需要去把前面的多处理器编程补回来，然后这篇文章中的一些链接都看一下，大致就能更深入地理解并发了。</p>
]]></content>
      <categories>
        <category>Operating System</category>
      </categories>
      <tags>
        <tag>基础学习</tag>
      </tags>
  </entry>
  <entry>
    <title>Web学习1:Html基本语法</title>
    <url>/2023-05-06-Web1/</url>
    <content><![CDATA[<p>**Preface:**考完了算法设计与分析，终于有一点时间可以用来自主学习了。由于有一门选修课要用到许多Web的知识，所以计划给Web学习分配一些时间，赶紧自学完。CS和OS是长期的主线，防止自己的节奏乱掉在这里提一下。</p>
<span id="more"></span>

<h4 id="HTML基础标签"><a href="#HTML基础标签" class="headerlink" title="HTML基础标签"></a>HTML基础标签</h4><h4 id="文件结构"><a href="#文件结构" class="headerlink" title="文件结构"></a>文件结构</h4><p>html的所有标签大致为以下结构，例如：</p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;!DOCTYPE <span class="keyword">html</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">html</span> <span class="attr">lang</span>=<span class="string">&quot;zh-CN&quot;</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">head</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">charset</span>=<span class="string">&quot;UTF-8&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">meta</span> <span class="attr">name</span>=<span class="string">&quot;viewport&quot;</span> <span class="attr">content</span>=<span class="string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">title</span>&gt;</span>Hello World<span class="tag">&lt;/<span class="name">title</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">head</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></span><br><span class="line">    <span class="tag">&lt;<span class="name">h1</span>&gt;</span>hello world<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">html</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>html</strong></p>
<p><code>&lt;html&gt;</code>元素表示一个HTML文档的根，也称为根元素，所有其他元素必须是此元素的后代</p>
<hr>
<p><strong>head</strong></p>
<p><code>&lt;head&gt;</code>元素规定文档的相关配置信息，包括文档的标题，引用的文档样式和脚本等</p>
<hr>
<p><strong>body</strong></p>
<p><code>&lt;body&gt;</code>元素表示文档的内容，document.body属性提供了可以轻松访问文档的脚本</p>
<hr>
<p><strong>title</strong></p>
<p><code>&lt;title&gt;</code>元素定义文档的标题，先是在浏览器的标题栏或者标签页，只包含文本，如果是包含标签，则它包含的任何标签都会被忽略</p>
<hr>
<p><strong>meta</strong></p>
<p><code>&lt;meta&gt;</code>元素表示那些不能由其他HTML (meta-related)元素(base, link, script, style, title)之一表示的任何元数据信息</p>
<ul>
<li>chartset</li>
<li>name</li>
</ul>
<hr>
<p><strong>icon</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">link</span> <span class="attr">rel</span>=<span class="string">&quot;icon&quot;</span> <span class="attr">href</span>=<span class="string">&quot;/images/logo.png&quot;</span>&gt;</span></span><br></pre></td></tr></table></figure>

<hr>
<p><strong>多行注释</strong></p>
<figure class="highlight html"><table><tr><td class="code"><pre><span class="line"><span class="comment">&lt;!-- comments --&gt;</span></span><br></pre></td></tr></table></figure>

<h4 id="基础标签"><a href="#基础标签" class="headerlink" title="基础标签"></a>基础标签</h4><p><strong>div</strong></p>
<p><code>&lt;div&gt;</code>元素是一个通用的流内容容器，在不使用CSS的情况喜爱，对其内容和布局没有任何影响</p>
<p>主要是在逻辑上把一些元素打包在一起</p>
<p>是一个块级元素，与行级元素的区别就是是否会自己换行</p>
<hr>
<p><strong>span</strong></p>
<p><code>&lt;span&gt;</code>元素是短语内容的通用行内容器，可以用来编组元素来达到某些样式，或者这些元素有共同的属性。</p>
<p>应该在没有其他合适的语义元素才使用</p>
<p>和上面div的不同就是这是个行级元素</p>
<hr>
<p><strong>h1 ~ h6</strong></p>
<p>Heading 呈现了六个不同级别的标题</p>
<hr>
<p><strong>p</strong></p>
<p><code>&lt;p&gt;</code>表示文本的一个段落，表现为一整块与相邻文本分离的文本，或以垂直的空白格里或以首行缩进</p>
<p>是一个块级元素</p>
<hr>
<p><strong>pre</strong></p>
<p><code>&lt;pre&gt;</code>表示预定义格式文本(人话就是保留锁进、空格、换行符之类的)</p>
<p>紧跟在这个标签之后的那个换行符会被省略</p>
<p>pre中的默认字体是等宽字体，如果想用不等宽的就去p中用br和一些空格的转义字符自己去写</p>
<hr>
<p><strong>br</strong></p>
<p><code>&lt;br&gt;</code>回车换行</p>
<hr>
]]></content>
      <categories>
        <category>Web</category>
      </categories>
      <tags>
        <tag>基础学习</tag>
      </tags>
  </entry>
  <entry>
    <title>PA1:The simplest computer</title>
    <url>/PA1-The-simplest-computer/</url>
    <content><![CDATA[<p>**Preface:**PA或许比较困难，我想记录一下途中遇到的困难，以及我是如何解决，在这个实验的过程中我希望能培养一下我先前比较弱的RTFSC能力。</p>
<span id="more"></span>

<h4 id="BUGs："><a href="#BUGs：" class="headerlink" title="BUGs："></a>BUGs：</h4><ul>
<li>在<code>开始愉快的PA之旅之前</code>中，运行fceux-am时报错**(UNcompleted)**：</li>
</ul>
<p><img src="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/image-20230502191442346.png"></p>
<p>如下修改过后，fceux-am能运行，声音和游戏都能运行，如果切换成字符模式可以正常玩，但是没有画面，至今不知道怎么解决，也不知道哪里有问题。</p>
<p><img src="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/image-20230502195059434.png"></p>
<hr>
<ul>
<li>运行risv32-NEMU时发现报错如下</li>
</ul>
<p>![](<a href="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/Screenshot">https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/Screenshot</a> from 2023-04-28 23-11-19.png)</p>
<p>看了calloc的manual，发现是给gdb_conn *指针申请空间的时候申请了sizeof(strcut gdb_conn *)大小的内存，实际上内存应该申请的是sizeof(strcut gdb_conn)大小</p>
<p>修改后成功编译运行risv32-NEMU，欢迎界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/image-20230428232022537.png"></p>
<hr>
<ul>
<li>x86-CPU-state中寄存器部分需要修改</li>
</ul>
<p>做出如下修改：</p>
<p><img src="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/image-20230502192612669.png"></p>
<p>成功运行x86-NEMU，欢迎界面：</p>
<p><img src="https://cdn.jsdelivr.net/gh/QZhou0706/picGoStorage@master/img/image-20230502193010338.png"></p>
<hr>
]]></content>
      <categories>
        <category>PA实验</category>
      </categories>
  </entry>
  <entry>
    <title>Init Blog</title>
    <url>/2023-05-30-init_blog/</url>
    <content><![CDATA[<p><strong>Preface:</strong> 重载了系统，我的博客又无了，现在吸收了教训，从无到有开始记录以下创建博客的过程。</p>
<span id="more"></span>

<h3 id="使用-npm-下载-hexo-theme-next-最新版"><a href="#使用-npm-下载-hexo-theme-next-最新版" class="headerlink" title="使用 npm 下载 hexo-theme-next 最新版"></a>使用 npm 下载 <code>hexo-theme-next</code> 最新版</h3><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-theme-next@latest</span></span><br></pre></td></tr></table></figure>

<ol start="2">
<li>设置 Hexo 主题</li>
</ol>
<p>编辑 Hexo config file 设置 theme 为 next</p>
<figure class="highlight json"><figcaption><span>Hexo config file</span></figcaption><table><tr><td class="code"><pre><span class="line">theme<span class="punctuation">:</span> next</span><br></pre></td></tr></table></figure>

<p>这时运行 hexo s 会报错 <code>Error: Cannot find module &#39;css&#39;</code>，下载 css 包就行</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install css</span><br></pre></td></tr></table></figure>

<p>然后就可以成功启动 next 主题的博客</p>
<p>先跳过 deploy 的过程，先把本地能配的都配好</p>
<h3 id="Next-配置文件"><a href="#Next-配置文件" class="headerlink" title="Next 配置文件"></a>Next 配置文件</h3><p>为了能在未来更新 next 主题，应该把配置文件的信息放在 hexo-site 位置下</p>
<ul>
<li>确保是 hexo 5.0 以后的版本</li>
<li>在 hexo-site 创建一个 _config.next.yml 文件</li>
<li>在 next theme 中把所有的信息都复制过来</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Installed through npm</span></span><br><span class="line">cp node_modules/hexo-theme-next/_config.yml _config.next.yml</span><br></pre></td></tr></table></figure>

<h3 id="配置-Hexo-信息以及-Next-主题配置"><a href="#配置-Hexo-信息以及-Next-主题配置" class="headerlink" title="配置 Hexo 信息以及 Next 主题配置"></a>配置 Hexo 信息以及 Next 主题配置</h3><p>在 _config.yml 下把该填的都填了</p>
<h4 id="Sidebar"><a href="#Sidebar" class="headerlink" title="Sidebar"></a>Sidebar</h4><ul>
<li>设置 Avatar</li>
</ul>
<p>在 Next config file 中编辑 avatar 中的 url ，改为图片的位置&#x2F;地址</p>
<ul>
<li>Site State</li>
</ul>
<p>设置 Next config file 中的 site state 为 true</p>
<figure class="highlight plaintext"><figcaption><span>config file</span></figcaption><table><tr><td class="code"><pre><span class="line">site_state: true</span><br></pre></td></tr></table></figure>

<ul>
<li>Social Link</li>
</ul>
<figure class="highlight json"><figcaption><span>Next config file</span></figcaption><table><tr><td class="code"><pre><span class="line">social<span class="punctuation">:</span></span><br><span class="line">  GitHub<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//github.com/yourname || fab fa-github</span></span><br><span class="line">  E-Mail<span class="punctuation">:</span> mailto<span class="punctuation">:</span>yourname@gmail.com || fa fa-envelope</span><br><span class="line">  Weibo<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//weibo.com/yourname || fab fa-weibo</span></span><br><span class="line">  Twitter<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//twitter.com/yourname || fab fa-twitter</span></span><br><span class="line">  FB Page<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//www.facebook.com/yourname || fab fa-facebook</span></span><br><span class="line">  StackOverflow<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//stackoverflow.com/yourname || fab fa-stack-overflow</span></span><br><span class="line">  YouTube<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//youtube.com/yourname || fab fa-youtube</span></span><br><span class="line">  Instagram<span class="punctuation">:</span> https<span class="punctuation">:</span><span class="comment">//instagram.com/yourname || fab fa-instagram</span></span><br><span class="line">  Skype<span class="punctuation">:</span> skype<span class="punctuation">:</span>yourname?call|chat || fab fa-skype</span><br></pre></td></tr></table></figure>

<p>其他的按照 Siderbar 的默认设置即可</p>
<h4 id="Footer"><a href="#Footer" class="headerlink" title="Footer"></a>Footer</h4><p>设置以下备案号，把 power 设置为 false ，copyright之后再设置</p>
<h4 id="Posts"><a href="#Posts" class="headerlink" title="Posts"></a>Posts</h4><ul>
<li>Post Meta Display</li>
</ul>
<p>默认</p>
<ul>
<li>Post Wordcount</li>
</ul>
<p>不设置，不用</p>
<ul>
<li>Tag Icon</li>
</ul>
<p>设置为 true</p>
<ul>
<li>Post Edit</li>
</ul>
<p>enable 设置为 true</p>
<p>设置 url</p>
<p>For site repository</p>
<p>Link for view source: <code>url: https://github.com/.../tree/master/source/_posts/</code></p>
<p>Link for fork &amp; edit: <code>url: https://github.com/.../edit/master/source/_posts/</code></p>
<p>For post repository</p>
<p>Link for view source: <code>url: https://github.com/.../_posts/tree/master/</code></p>
<p>Link for fork &amp; edit: <code>url: https://github.com/.../_posts/edit/master/</code></p>
<ul>
<li>Post Navigation</li>
</ul>
<p>默认为 left</p>
<h4 id="Custom-Pages"><a href="#Custom-Pages" class="headerlink" title="Custom Pages"></a>Custom Pages</h4><p>将 Next config file 的 menu 设置中把所需要的几个 page 前的注释 # 去掉，然后 hexo new page custom-name 创建这几个界面</p>
<ul>
<li>添加 Tag page &amp;&amp; categories page</li>
</ul>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash"><span class="built_in">cd</span> hexo-site</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo new page tags</span></span><br></pre></td></tr></table></figure>

<p>然后把 index.md 中的 type 改称 tags</p>
<p>categories 同理</p>
<ul>
<li>添加 Google Calendar page</li>
</ul>
<p>获取 google api key 和 google calendar key，填入 Next config file 中的位置</p>
<p>添加 schedule page ，类似 tags</p>
<h4 id="Misc-设置"><a href="#Misc-设置" class="headerlink" title="Misc 设置"></a>Misc 设置</h4><ul>
<li>Preconnect</li>
<li>Mobile device adaption</li>
<li>Body Scrollbar</li>
<li>Back to Top</li>
<li>Font Customization</li>
<li>Codeblock Style<ul>
<li>button</li>
<li>theme 默认</li>
</ul>
</li>
</ul>
<p>将 code.fontfamily 设置为 Fira Code</p>
<h4 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h4><p>设置 Hexo config file 中的 url ，设置 Next config file 中 index_with_subtitle 为 true</p>
<ul>
<li>Google Search Console</li>
</ul>
<p>在 Next config file 中修改</p>
<figure class="highlight json"><figcaption><span>Next config file</span></figcaption><table><tr><td class="code"><pre><span class="line">google_site_verification<span class="punctuation">:</span> XXXXXXXXXXXXXXXXXXXXXXX</span><br></pre></td></tr></table></figure>

<h4 id="Mermaid"><a href="#Mermaid" class="headerlink" title="Mermaid"></a>Mermaid</h4><figure class="highlight shell"><figcaption><span>NexT config file</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Mermaid tag</span></span><br><span class="line">mermaid:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Available themes: default | dark | forest | neutral</span></span><br><span class="line">  theme:</span><br><span class="line">    light: default</span><br><span class="line">    dark: dark</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><figcaption><span>Hexo config file</span></figcaption><table><tr><td class="code"><pre><span class="line">highlight:</span><br><span class="line">  exclude_languages:</span><br><span class="line">    - mermaid</span><br></pre></td></tr></table></figure>

<pre><code class="highlight mermaid">sequenceDiagram
Alice-&gt;&gt;John: Hello John, how are you?
loop Healthcheck
    John-&gt;&gt;John: Fight against hypochondria
end
Note right of John: Rational thoughts!
John--&gt;&gt;Alice: Great!
John-&gt;&gt;Bob: How about you?
Bob--&gt;&gt;John: Jolly good!</code></pre>



<h4 id="Note"><a href="#Note" class="headerlink" title="Note"></a>Note</h4><figure class="highlight shell"><figcaption><span>Next config file</span></figcaption><table><tr><td class="code"><pre><span class="line">note:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Note tag style values:</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"> - simple    bs-callout old alert style. Default.</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"> - modern    bs-callout new (v2-v3) alert style.</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"> - flat      flat callout style with background, like on Mozilla or StackOverflow.</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"> - disabled  <span class="built_in">disable</span> all CSS styles import of note tag.</span></span><br><span class="line">  style: simple</span><br><span class="line">  icons: false</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Offset lighter of background <span class="keyword">in</span> % <span class="keyword">for</span> modern and flat styles (modern: -12 | 12; flat: -18 | 6).</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Offset also applied to label tag variables. This option can work with disabled note tag.</span></span><br><span class="line">  light_bg_offset: 0</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note %&#125;</span><br><span class="line">#### Header</span><br><span class="line">(without define class style)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note "><h5 id="Header"><a href="#Header" class="headerlink" title="Header"></a>Header</h5><p>(without define class style)</p>
</div>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">#### Default Header</span><br><span class="line">Welcome to [Hexo!](https://hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note default"><h5 id="Default-Header"><a href="#Default-Header" class="headerlink" title="Default Header"></a>Default Header</h5><p>Welcome to <a href="https://hexo.io/">Hexo!</a></p>
</div>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note primary %&#125;</span><br><span class="line">#### Primary Header</span><br><span class="line">**Welcome** to [Hexo!](https://hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note primary"><h5 id="Primary-Header"><a href="#Primary-Header" class="headerlink" title="Primary Header"></a>Primary Header</h5><p><strong>Welcome</strong> to <a href="https://hexo.io/">Hexo!</a></p>
</div>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note info %&#125;</span><br><span class="line">#### Info Header</span><br><span class="line">**Welcome** to [Hexo!](https://hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note info"><h5 id="Info-Header"><a href="#Info-Header" class="headerlink" title="Info Header"></a>Info Header</h5><p><strong>Welcome</strong> to <a href="https://hexo.io/">Hexo!</a></p>
</div>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note success %&#125;</span><br><span class="line">#### Success Header</span><br><span class="line">**Welcome** to [Hexo!](https://hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note success"><h5 id="Success-Header"><a href="#Success-Header" class="headerlink" title="Success Header"></a>Success Header</h5><p><strong>Welcome</strong> to <a href="https://hexo.io/">Hexo!</a></p>
</div>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note warning %&#125;</span><br><span class="line">#### Warning Header</span><br><span class="line">**Welcome** to [Hexo!](https://hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note warning"><h5 id="Warning-Header"><a href="#Warning-Header" class="headerlink" title="Warning Header"></a>Warning Header</h5><p><strong>Welcome</strong> to <a href="https://hexo.io/">Hexo!</a></p>
</div>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note danger %&#125;</span><br><span class="line">#### Danger Header</span><br><span class="line">**Welcome** to [Hexo!](https://hexo.io)</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note danger"><h5 id="Danger-Header"><a href="#Danger-Header" class="headerlink" title="Danger Header"></a>Danger Header</h5><p><strong>Welcome</strong> to <a href="https://hexo.io/">Hexo!</a></p>
</div>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note info no-icon %&#125;</span><br><span class="line">#### No icon note</span><br><span class="line">Note **without** icon: `note info no-icon`</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note info no-icon"><h5 id="No-icon-note"><a href="#No-icon-note" class="headerlink" title="No icon note"></a>No icon note</h5><p>Note <strong>without</strong> icon: <code>note info no-icon</code></p>
</div>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note primary This is a summary %&#125;</span><br><span class="line">#### Details and summary</span><br><span class="line">Note with summary: `note primary This is a summary`</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<details class="note primary"><summary><p>This is a summary</p>
</summary>
<h5 id="Details-and-summary"><a href="#Details-and-summary" class="headerlink" title="Details and summary"></a>Details and summary</h5><p>Note with summary: <code>note primary This is a summary</code></p>

</details>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note info no-icon This is a summary %&#125;</span><br><span class="line">#### Details and summary (No icon)</span><br><span class="line">Note with summary: `note info no-icon This is a summary`</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<details class="note info no-icon"><summary><p>This is a summary</p>
</summary>
<h5 id="Details-and-summary-No-icon"><a href="#Details-and-summary-No-icon" class="headerlink" title="Details and summary (No icon)"></a>Details and summary (No icon)</h5><p>Note with summary: <code>note info no-icon This is a summary</code></p>

</details>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note success %&#125;</span><br><span class="line">#### Codeblock in note</span><br><span class="line"></span><br><span class="line">```</span><br><span class="line">code block in note tag</span><br><span class="line">code block in note tag</span><br><span class="line">code block in note tag</span><br><span class="line">```</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note success"><h5 id="Codeblock-in-note"><a href="#Codeblock-in-note" class="headerlink" title="Codeblock in note"></a>Codeblock in note</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">code block in note tag</span><br><span class="line">code block in note tag</span><br><span class="line">code block in note tag</span><br></pre></td></tr></table></figure></div>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% note default %&#125;</span><br><span class="line">#### Lists in note</span><br><span class="line">* ul</span><br><span class="line">* ul</span><br><span class="line">    * ul</span><br><span class="line">    * ul</span><br><span class="line">* ul</span><br><span class="line"></span><br><span class="line">1. ol</span><br><span class="line">2. ol</span><br><span class="line">    1. ol</span><br><span class="line">    2. ol</span><br><span class="line">3. ol</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note default"><h5 id="Lists-in-note"><a href="#Lists-in-note" class="headerlink" title="Lists in note"></a>Lists in note</h5><ul>
<li>ul</li>
<li>ul<ul>
<li>ul</li>
<li>ul</li>
</ul>
</li>
<li>ul</li>
</ul>
<ol>
<li>ol</li>
<li>ol<ol>
<li>ol</li>
<li>ol</li>
</ol>
</li>
<li>ol</li>
</ol>
</div>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#### Table in Note</span><br><span class="line">&#123;% note default %&#125;</span><br><span class="line">| 1 | 2 |</span><br><span class="line">| - | - |</span><br><span class="line">| 3 | 4 |</span><br><span class="line">| 5 | 6 |</span><br><span class="line">| 7 | 8 |</span><br><span class="line">&#123;% endnote %&#125;</span><br></pre></td></tr></table></figure>

<h5 id="Table-in-Note"><a href="#Table-in-Note" class="headerlink" title="Table in Note"></a>Table in Note</h5><div class="note default"><table>
<thead>
<tr>
<th align="left">1</th>
<th>2</th>
</tr>
</thead>
<tbody><tr>
<td align="left">3</td>
<td>4</td>
</tr>
<tr>
<td align="left">5</td>
<td>6</td>
</tr>
<tr>
<td align="left">7</td>
<td>8</td>
</tr>
</tbody></table>
</div>

<h4 id="Tabs"><a href="#Tabs" class="headerlink" title="Tabs"></a>Tabs</h4><figure class="highlight shell"><figcaption><span>Next config file</span></figcaption><table><tr><td class="code"><pre><span class="line">tabs:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Make the nav bar of tabs with long content stick to the top.</span></span><br><span class="line">  sticky: false</span><br><span class="line">  transition:</span><br><span class="line">    tabs: false</span><br><span class="line">    labels: true</span><br></pre></td></tr></table></figure>

<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs First unique name %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<div class="tabs" id="first-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#first-unique-name-1">First unique name 1</a></li><li class="tab"><a href="#first-unique-name-2">First unique name 2</a></li><li class="tab"><a href="#first-unique-name-3">First unique name 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="first-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="first-unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="first-unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div></div>

<h5 id="Tabs-with-3rd-tab-selected"><a href="#Tabs-with-3rd-tab-selected" class="headerlink" title="Tabs with 3rd tab selected"></a>Tabs with 3rd tab selected</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Second unique name, 3 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<div class="tabs" id="second-unique-name"><ul class="nav-tabs"><li class="tab"><a href="#second-unique-name-1">Second unique name 1</a></li><li class="tab"><a href="#second-unique-name-2">Second unique name 2</a></li><li class="tab active"><a href="#second-unique-name-3">Second unique name 3</a></li></ul><div class="tab-content"><div class="tab-pane" id="second-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="second-unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane active" id="second-unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div></div>

<h5 id="Tabs-with-no-tab-selected"><a href="#Tabs-with-no-tab-selected" class="headerlink" title="Tabs with no tab selected"></a>Tabs with no tab selected</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Third unique name, -1 %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<div class="tabs" id="third-unique-name"><ul class="nav-tabs"><li class="tab"><a href="#third-unique-name-1">Third unique name 1</a></li><li class="tab"><a href="#third-unique-name-2">Third unique name 2</a></li><li class="tab"><a href="#third-unique-name-3">Third unique name 3</a></li></ul><div class="tab-content"><div class="tab-pane" id="third-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="third-unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="third-unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div></div>

<h5 id="Tabs-with-custom-labels"><a href="#Tabs-with-custom-labels" class="headerlink" title="Tabs with custom labels"></a>Tabs with custom labels</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Fourth unique name %&#125;</span><br><span class="line">&lt;!-- tab Solution 1 --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab Solution 2 --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab Solution 3 --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<div class="tabs" id="fourth-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#fourth-unique-name-1">Solution 1</a></li><li class="tab"><a href="#fourth-unique-name-2">Solution 2</a></li><li class="tab"><a href="#fourth-unique-name-3">Solution 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="fourth-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="fourth-unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="fourth-unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div></div>

<h5 id="Tabs-with-icons-only"><a href="#Tabs-with-icons-only" class="headerlink" title="Tabs with icons only"></a>Tabs with icons only</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Fifth unique name %&#125;</span><br><span class="line">&lt;!-- tab @text-width --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @font --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab @bold --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<div class="tabs" id="fifth-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#fifth-unique-name-1"><i class="fa fa-text-width"></i></a></li><li class="tab"><a href="#fifth-unique-name-2"><i class="fa fa-font"></i></a></li><li class="tab"><a href="#fifth-unique-name-3"><i class="fa fa-bold"></i></a></li></ul><div class="tab-content"><div class="tab-pane active" id="fifth-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="fifth-unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="fifth-unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div></div>

<h5 id="Tabs-with-icons-and-labels"><a href="#Tabs-with-icons-and-labels" class="headerlink" title="Tabs with icons and labels"></a>Tabs with icons and labels</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Sixth unique name %&#125;</span><br><span class="line">&lt;!-- tab Solution 1@text-width --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab Solution 2@font --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab Solution 3@bold --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<div class="tabs" id="sixth-unique-name"><ul class="nav-tabs"><li class="tab active"><a href="#sixth-unique-name-1"><i class="fa fa-text-width"></i>Solution 1</a></li><li class="tab"><a href="#sixth-unique-name-2"><i class="fa fa-font"></i>Solution 2</a></li><li class="tab"><a href="#sixth-unique-name-3"><i class="fa fa-bold"></i>Solution 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="sixth-unique-name-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="sixth-unique-name-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="sixth-unique-name-3"><p><strong>This is Tab 3.</strong></p></div></div></div>

<h5 id="Tabs-permalinks-test"><a href="#Tabs-permalinks-test" class="headerlink" title="Tabs permalinks test"></a>Tabs permalinks test</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Permalink for &gt; [Tab one](#tab-one).</span><br><span class="line">Permalink for &gt; [Tab one 1](#tab-one-1).</span><br><span class="line">Permalink for &gt; [Tab one 2](#tab-one-2).</span><br><span class="line">Permalink for &gt; [Tab one 3](#tab-one-3).</span><br><span class="line"></span><br><span class="line">Permalink for &gt; [Tab two](#tab-two).</span><br><span class="line">Permalink for &gt; [Tab two 1](#tab-two-1).</span><br><span class="line">Permalink for &gt; [Tab two 2](#tab-two-2).</span><br><span class="line">Permalink for &gt; [Tab two 3](#tab-two-3).</span><br><span class="line"></span><br><span class="line">&#123;% tabs Tab one %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% tabs Tab two %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<p>Permalink for &gt; <a href="#tab-one">Tab one</a>.<br>Permalink for &gt; <a href="#tab-one-1">Tab one 1</a>.<br>Permalink for &gt; <a href="#tab-one-2">Tab one 2</a>.<br>Permalink for &gt; <a href="#tab-one-3">Tab one 3</a>.</p>
<p>Permalink for &gt; <a href="#tab-two">Tab two</a>.<br>Permalink for &gt; <a href="#tab-two-1">Tab two 1</a>.<br>Permalink for &gt; <a href="#tab-two-2">Tab two 2</a>.<br>Permalink for &gt; <a href="#tab-two-3">Tab two 3</a>.</p>
<div class="tabs" id="tab-one"><ul class="nav-tabs"><li class="tab active"><a href="#tab-one-1">Tab one 1</a></li><li class="tab"><a href="#tab-one-2">Tab one 2</a></li><li class="tab"><a href="#tab-one-3">Tab one 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-one-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="tab-one-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="tab-one-3"><p><strong>This is Tab 3.</strong></p></div></div></div>

<div class="tabs" id="tab-two"><ul class="nav-tabs"><li class="tab active"><a href="#tab-two-1">Tab two 1</a></li><li class="tab"><a href="#tab-two-2">Tab two 2</a></li><li class="tab"><a href="#tab-two-3">Tab two 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tab-two-1"><p><strong>This is Tab 1.</strong></p></div><div class="tab-pane" id="tab-two-2"><p><strong>This is Tab 2.</strong></p></div><div class="tab-pane" id="tab-two-3"><p><strong>This is Tab 3.</strong></p></div></div></div>

<h5 id="Tabs-with-other-tags"><a href="#Tabs-with-other-tags" class="headerlink" title="Tabs with other tags"></a>Tabs with other tags</h5><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% tabs Tags %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 1.**</span><br><span class="line"></span><br><span class="line">1. One</span><br><span class="line">2. Two</span><br><span class="line">3. Three</span><br><span class="line"></span><br><span class="line">Indented code block:</span><br><span class="line"></span><br><span class="line">    nano /etc</span><br><span class="line"></span><br><span class="line">Tagged code block:</span><br><span class="line"></span><br><span class="line">&#123;% code %&#125;</span><br><span class="line">code tag</span><br><span class="line">code tag</span><br><span class="line">code tag</span><br><span class="line">&#123;% endcode %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% note default %&#125;</span><br><span class="line">Note default tag.</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 2.**</span><br><span class="line"></span><br><span class="line">* Five</span><br><span class="line">* Six</span><br><span class="line">* Seven</span><br><span class="line"></span><br><span class="line">&#123;% note primary %&#125;</span><br><span class="line">&#123;% youtube Kt7u5kr_P5o %&#125;</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Tab 3.**</span><br><span class="line"></span><br><span class="line">&#123;% subtabs Sub Tabs %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Sub Tab 1.**</span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Sub Tab 2.**</span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</span><br><span class="line"></span><br><span class="line">Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Sub Tab 3.**</span><br><span class="line"></span><br><span class="line">&#123;% subtabs Sub-Sub Tabs %&#125;</span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Sub-Sub Tab 1 of Sub Tab 3.**</span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</span><br><span class="line"></span><br><span class="line">Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.</span><br><span class="line"></span><br><span class="line">Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Sub-Sub Tab 2 of Sub Tab 3.**</span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.</span><br><span class="line"></span><br><span class="line">Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line"></span><br><span class="line">&lt;!-- tab --&gt;</span><br><span class="line">**This is Sub-Sub Tab 3 of Sub Tab 3.**</span><br><span class="line"></span><br><span class="line">&#123;% note success %&#125;</span><br><span class="line">Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</span><br><span class="line"></span><br><span class="line">&#123;% note warning %&#125;</span><br><span class="line">Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.</span><br><span class="line"></span><br><span class="line">&#123;% note danger %&#125;</span><br><span class="line">Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.</span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line"></span><br><span class="line">&#123;% endnote %&#125;</span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endsubtabs %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endsubtabs %&#125;</span><br><span class="line"></span><br><span class="line">&lt;!-- endtab --&gt;</span><br><span class="line">&#123;% endtabs %&#125;</span><br></pre></td></tr></table></figure>

<div class="tabs" id="tags"><ul class="nav-tabs"><li class="tab active"><a href="#tags-1">Tags 1</a></li><li class="tab"><a href="#tags-2">Tags 2</a></li><li class="tab"><a href="#tags-3">Tags 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="tags-1"><p><strong>This is Tab 1.</strong></p>
<ol>
<li>One</li>
<li>Two</li>
<li>Three</li>
</ol>
<p>Indented code block:</p>
<pre><code>nano /etc
</code></pre>
<p>Tagged code block:</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">code tag</span><br><span class="line">code tag</span><br><span class="line">code tag</span><br></pre></td></tr></table></figure>

<div class="note default"><p>Note default tag.</p>
</div></div><div class="tab-pane" id="tags-2"><p><strong>This is Tab 2.</strong></p>
<ul>
<li>Five</li>
<li>Six</li>
<li>Seven</li>
</ul>
<div class="note primary"><div class="video-container"><iframe src="https://www.youtube.com/embed/Kt7u5kr_P5o" frameborder="0" loading="lazy" allowfullscreen></iframe></div></div></div><div class="tab-pane" id="tags-3"><p><strong>This is Tab 3.</strong></p>
<div class="tabs" id="sub-tabs"><ul class="nav-tabs"><li class="tab active"><a href="#sub-tabs-1">Sub Tabs 1</a></li><li class="tab"><a href="#sub-tabs-2">Sub Tabs 2</a></li><li class="tab"><a href="#sub-tabs-3">Sub Tabs 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="sub-tabs-1"><p><strong>This is Sub Tab 1.</strong></p>
<div class="note success"><p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</p>
<div class="note warning"><p>Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.</p>
</div>

<p>Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.</p>
</div></div><div class="tab-pane" id="sub-tabs-2"><p><strong>This is Sub Tab 2.</strong></p>
<div class="note success"><p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</p>
<p>Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.</p>
<div class="note danger"><p>Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.</p>
</div></div></div><div class="tab-pane" id="sub-tabs-3"><p><strong>This is Sub Tab 3.</strong></p>
<div class="tabs" id="sub-sub-tabs"><ul class="nav-tabs"><li class="tab active"><a href="#sub-sub-tabs-1">Sub-Sub Tabs 1</a></li><li class="tab"><a href="#sub-sub-tabs-2">Sub-Sub Tabs 2</a></li><li class="tab"><a href="#sub-sub-tabs-3">Sub-Sub Tabs 3</a></li></ul><div class="tab-content"><div class="tab-pane active" id="sub-sub-tabs-1"><p><strong>This is Sub-Sub Tab 1 of Sub Tab 3.</strong></p>
<div class="note success"><p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</p>
<p>Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.</p>
<p>Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.</p>
</div></div><div class="tab-pane" id="sub-sub-tabs-2"><p><strong>This is Sub-Sub Tab 2 of Sub Tab 3.</strong></p>
<div class="note success"><p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</p>
<div class="note warning"><p>Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.</p>
<p>Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.</p>
</div>
</div></div><div class="tab-pane" id="sub-sub-tabs-3"><p><strong>This is Sub-Sub Tab 3 of Sub Tab 3.</strong></p>
<div class="note success"><p>Lorem ipsum dolor sit amet, consectetuer adipiscing elit. Phasellus hendrerit. Pellentesque aliquet nibh nec urna. In nisi neque, aliquet vel, dapibus id, mattis vel, nisi. Sed pretium, ligula sollicitudin laoreet viverra, tortor libero sodales leo, eget blandit nunc tortor eu nibh. Nullam mollis. Ut justo. Suspendisse potenti. Pellentesque fermentum dolor. Aliquam quam lectus, facilisis auctor, ultrices ut, elementum vulputate, nunc.</p>
<div class="note warning"><p>Sed egestas, ante et vulputate volutpat, eros pede semper est, vitae luctus metus libero eu augue. Morbi purus libero, faucibus adipiscing, commodo quis, gravida id, est. Sed lectus. Praesent elementum hendrerit tortor. Sed semper lorem at felis. Vestibulum volutpat, lacus a ultrices sagittis, mi neque euismod dui, eu pulvinar nunc sapien ornare nisl. Phasellus pede arcu, dapibus eu, fermentum et, dapibus sed, urna.</p>
<div class="note danger"><p>Morbi interdum mollis sapien. Sed ac risus. Phasellus lacinia, magna a ullamcorper laoreet, lectus arcu pulvinar risus, vitae facilisis libero dolor a purus. Sed vel lacus. Mauris nibh felis, adipiscing varius, adipiscing in, lacinia vel, tellus. Suspendisse ac urna. Etiam pellentesque mauris ut lectus. Nunc tellus ante, mattis eget, gravida vitae, ultricies ac, leo. Integer leo pede, ornare a, lacinia eu, vulputate vel, nisl.</p>
</div>
</div>
</div></div></div></div></div></div></div></div></div></div>



<h4 id="Centered-Quote"><a href="#Centered-Quote" class="headerlink" title="Centered Quote"></a>Centered Quote</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% centerquote %&#125;Something&#123;% endcenterquote %&#125;</span><br></pre></td></tr></table></figure>

<div class="note danger"><p>这里遇到了错误，无法加载上面的引用</p>
<p><strong>解决：</strong></p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-renderer-swig</span><br></pre></td></tr></table></figure>
</div>

<blockquote class="blockquote-center">
<p>Something</p>

</blockquote>

<h4 id="Video"><a href="#Video" class="headerlink" title="Video"></a>Video</h4><figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">&#123;% video url %&#125;</span><br><span class="line">&#123;% youtube  Kt7u5kr_P5o %&#125;</span><br></pre></td></tr></table></figure>

<div class="video-container"><iframe src="https://www.youtube.com/embed/gx1hEQSOAyg" frameborder="0" loading="lazy" allowfullscreen></iframe></div>

<h3 id="Third-party-plugin"><a href="#Third-party-plugin" class="headerlink" title="Third party plugin"></a>Third party plugin</h3><h4 id="Pjax-加速浏览"><a href="#Pjax-加速浏览" class="headerlink" title="Pjax 加速浏览"></a>Pjax 加速浏览</h4><figure class="highlight shell"><figcaption><span>Next config file</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Easily <span class="built_in">enable</span> fast Ajax navigation on your website.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">For more information: https://github.com/next-theme/pjax</span></span><br><span class="line">pjax: true</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install pjax</span><br></pre></td></tr></table></figure>

<h4 id="Math-Equations"><a href="#Math-Equations" class="headerlink" title="Math Equations"></a>Math Equations</h4><figure class="highlight shell"><figcaption><span>Next file config</span></figcaption><table><tr><td class="code"><pre><span class="line">math:</span><br><span class="line">  ...</span><br><span class="line">  mathjax:</span><br><span class="line">    enable: true</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm un hexo-renderer-marked</span></span><br><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm i hexo-renderer-pandoc</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">hexo clean &amp;&amp; hexo g -d</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">or hexo clean &amp;&amp; hexo s</span></span><br></pre></td></tr></table></figure>

<p>$$<br>\begin{equation}<br>E &#x3D; mc^2<br>\end{equation}<br>$$</p>
<p>$$<br>\begin{equation*}<br>e^{\pi i} + 1 &#x3D; 0<br>\end{equation*}<br>$$</p>
<p>In equation $\eqref{eq:tag_i}$, we find the value of an<br>interesting integral:<br>$$<br>\begin{equation}<br>  \int_0^\infty \frac{x^3} {e^x-1},dx &#x3D; \frac{\pi^4}{15}<br>  \tag{i}<br>  \label{eq:tag_i}<br>\end{equation}<br>$$</p>
<h4 id="Comments"><a href="#Comments" class="headerlink" title="Comments"></a>Comments</h4><p>Disqus is a global comment system that improves discussion on websites and connects conversations across the web.</p>
<ol>
<li>Create an account and log into <a href="https://disqus.com/">Disqus</a>. Once logged in, click the <code>GET STARTED</code> button on the homepage, then select <code>I want to install Disqus on my site</code> option and you will see the <code>Create a new site</code> interface.</li>
<li>Enter your <code>Website Name</code>, which will serve as your Disqus shortname, and select a Category from the drop-down menu. Then click <code>Create Site</code> button.</li>
<li>Choose <code>I don&#39;t see my platform listed, install manually with Universal Code</code>, configure Disqus for your site, and click <code>Complete Setup</code> button.</li>
<li>Set the value <code>enable</code> to <code>true</code>, add the obtained Disqus shortname (<code>shortname</code>), and edit other configurations in <code>disqus</code> section in the NexT config file as following:</li>
</ol>
<figure class="highlight shell"><figcaption><span>Next config file</span></figcaption><table><tr><td class="code"><pre><span class="line">disqus:</span><br><span class="line">  enable: false</span><br><span class="line">  shortname: your-short-disqus-name</span><br><span class="line">  count: true</span><br></pre></td></tr></table></figure>

<h4 id="Analytics"><a href="#Analytics" class="headerlink" title="Analytics"></a>Analytics</h4><p>前往 <a href="https://analytics.google.com/">Google analytics</a> 获取 track id，填入 Next config file 中</p>
<h4 id="LeanCloud-Counting"><a href="#LeanCloud-Counting" class="headerlink" title="LeanCloud Counting"></a>LeanCloud Counting</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line">npm install hexo-leancloud-counter-security</span><br></pre></td></tr></table></figure>

<p>登陆 LeanCloud 获取 AppID &amp; APPKey， 在 Hexo config file 中加入</p>
<figure class="highlight shell"><figcaption><span>Hexo cinfig file</span></figcaption><table><tr><td class="code"><pre><span class="line">leancloud_counter_security:</span><br><span class="line">  enable_sync: true</span><br><span class="line">  app_id: &lt;your app id&gt;</span><br><span class="line">  app_key: &lt;your app key&gt;</span><br><span class="line">  username: &lt;your username&gt; # Will be asked while deploying if is left blank</span><br><span class="line">  password: &lt;your password&gt; # Recommmended to be left blank. Will be asked while deploying if is left blank</span><br></pre></td></tr></table></figure>

<p>在 Next config file 中修改</p>
<figure class="highlight shell"><figcaption><span>Next config file</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Show number of visitors to each article.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">You can visit https://www.leancloud.cn get AppID and AppKey.</span></span><br><span class="line">leancloud_visitors:</span><br><span class="line">  enable: true</span><br><span class="line">  app_id: #&lt;app_id&gt;</span><br><span class="line">  app_key: #&lt;app_key&gt;</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Required <span class="keyword">for</span> apps from CN region</span></span><br><span class="line">  server_url: # &lt;your server url&gt;</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Dependencies: https://github.com/theme-next/hexo-leancloud-counter-security</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">If you don<span class="string">&#x27;t care about security in lc counter and just want to use it directly</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash"><span class="string">(without hexo-leancloud-counter-security plugin), set the `security` to `false`.</span></span></span><br><span class="line">  security: true</span><br></pre></td></tr></table></figure>

<h4 id="Local-Search"><a href="#Local-Search" class="headerlink" title="Local Search"></a>Local Search</h4><figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-generator-searchdb</span></span><br></pre></td></tr></table></figure>

<p>Hexo config file 中添加</p>
<figure class="highlight shell"><figcaption><span>Hexo config file</span></figcaption><table><tr><td class="code"><pre><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  content: true</span><br><span class="line">  format: html</span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><figcaption><span>Next config file</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Local search</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Dependencies: https://github.com/next-theme/hexo-generator-searchdb</span></span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">If auto, trigger search by changing input.</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">If manual, trigger search by pressing enter key or search button.</span></span><br><span class="line">  trigger: auto</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Show top n results per article, show all results by setting to -1</span></span><br><span class="line">  top_n_per_article: 1</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Unescape html strings to the readable one.</span></span><br><span class="line">  unescape: false</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Preload the search data when the page loads.</span></span><br><span class="line">  preload: false</span><br></pre></td></tr></table></figure>

<h4 id="Fancybox"><a href="#Fancybox" class="headerlink" title="Fancybox"></a>Fancybox</h4><figure class="highlight shell"><figcaption><span>Next config file</span></figcaption><table><tr><td class="code"><pre><span class="line">fancybox: true</span><br></pre></td></tr></table></figure>

<h4 id="Pangu-Autospace"><a href="#Pangu-Autospace" class="headerlink" title="Pangu Autospace"></a>Pangu Autospace</h4><p>自动在中文和英文之间加上一个空格</p>
<figure class="highlight shell"><figcaption><span>Next config file</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Pangu Support</span></span><br><span class="line">pangu: true</span><br></pre></td></tr></table></figure>

<h4 id="Quicklink"><a href="#Quicklink" class="headerlink" title="Quicklink"></a>Quicklink</h4><p><a href="https://github.com/GoogleChromeLabs/quicklink">Quicklink</a> is a JavaScript plugin that faster subsequent page-loads by prefetching in-viewport links during idle time. Chrome, Firefox, Edge are supported without polyfills.</p>
<figure class="highlight shell"><figcaption><span>Next config file</span></figcaption><table><tr><td class="code"><pre><span class="line">...</span><br><span class="line">quicklink:</span><br><span class="line">  enable: true</span><br><span class="line">  home: true</span><br><span class="line">  archive: true</span><br><span class="line">  delay: true</span><br><span class="line">  timeout: 3000</span><br><span class="line">  priority: true</span><br><span class="line">...</span><br></pre></td></tr></table></figure>

<h4 id="Animation-Effect"><a href="#Animation-Effect" class="headerlink" title="Animation Effect"></a>Animation Effect</h4><p>加载动画</p>
<figure class="highlight shell"><figcaption><span>Next config file</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_"># </span><span class="language-bash">Use Animate.css to animate everything.</span></span><br><span class="line"><span class="meta prompt_"># </span><span class="language-bash">For more information: https://animate.style</span></span><br><span class="line">motion:</span><br><span class="line">  enable: true</span><br><span class="line">  async: false</span><br><span class="line">  transition:</span><br><span class="line">    # All available Transition variants: https://theme-next.js.org/animate/</span><br><span class="line">    post_block: fadeIn</span><br><span class="line">    post_header: fadeInDown</span><br><span class="line">    post_body: fadeInDown</span><br><span class="line">    coll_header: fadeInLeft</span><br><span class="line">    # Only for Pisces | Gemini.</span><br><span class="line">    sidebar: fadeInUp</span><br></pre></td></tr></table></figure>

<h4 id="Progress-Bar"><a href="#Progress-Bar" class="headerlink" title="Progress Bar"></a>Progress Bar</h4><figure class="highlight shell"><figcaption><span>Next config file</span></figcaption><table><tr><td class="code"><pre><span class="line">pace:</span><br><span class="line">  enable: true</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">All available colors:</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">black | blue | green | orange | pink | purple | red | silver | white | yellow</span></span><br><span class="line">  color: black</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">All available themes:</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">big-counter | bounce | barber-shop | center-atom | center-circle | center-radar | center-simple</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">corner-indicator | fill-left | flat-top | flash | loading-bar | mac-osx | material | minimal</span></span><br><span class="line">  theme: big-counter</span><br></pre></td></tr></table></figure>

<h3 id="Advanced-Settings"><a href="#Advanced-Settings" class="headerlink" title="Advanced Settings"></a>Advanced Settings</h3><h4 id="CDN-Settings"><a href="#CDN-Settings" class="headerlink" title="CDN Settings"></a>CDN Settings</h4><p>用 CDN 加速插件和静态资源的加载</p>
<figure class="highlight shell"><figcaption><span>Next config file</span></figcaption><table><tr><td class="code"><pre><span class="line">vendors:</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">The CDN provider of NexT internal scripts.</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Available values: <span class="built_in">local</span> | jsdelivr | unpkg | cdnjs | custom</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Warning: If you are using the latest master branch of NexT, please <span class="built_in">set</span> `internal: <span class="built_in">local</span>`</span></span><br><span class="line">  internal: local</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">The default CDN provider of third-party plugins.</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Available values: <span class="built_in">local</span> | jsdelivr | unpkg | cdnjs | custom</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Dependencies <span class="keyword">for</span> `plugins: <span class="built_in">local</span>`: https://github.com/next-theme/plugins</span></span><br><span class="line">  plugins: unpkg</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">Custom CDN URL</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">For example:</span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">custom_cdn_url: https://cdn.jsdelivr.net/npm/<span class="variable">$&#123;npm_name&#125;</span>@<span class="variable">$&#123;version&#125;</span>/<span class="variable">$&#123;minified&#125;</span></span></span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">custom_cdn_url: https://cdnjs.cloudflare.com/ajax/libs/<span class="variable">$&#123;cdnjs_name&#125;</span>/<span class="variable">$&#123;version&#125;</span>/<span class="variable">$&#123;cdnjs_file&#125;</span></span></span><br><span class="line">  custom_cdn_url:</span><br></pre></td></tr></table></figure>

<h3 id="部署"><a href="#部署" class="headerlink" title="部署"></a>部署</h3><p>一键部署</p>
<figure class="highlight shell"><table><tr><td class="code"><pre><span class="line"><span class="meta prompt_">$ </span><span class="language-bash">npm install hexo-deployer-git</span></span><br></pre></td></tr></table></figure>

<figure class="highlight shell"><figcaption><span>Hexo config file</span></figcaption><table><tr><td class="code"><pre><span class="line">deploy:</span><br><span class="line">  type: git</span><br><span class="line">  repo: https://github.com/&lt;username&gt;/&lt;project&gt;</span><br><span class="line"><span class="meta prompt_">  # </span><span class="language-bash">example, https://github.com/hexojs/hexojs.github.io</span></span><br><span class="line">  branch: gh-pages</span><br></pre></td></tr></table></figure>

]]></content>
      <tags>
        <tag>Blog</tag>
      </tags>
  </entry>
</search>
